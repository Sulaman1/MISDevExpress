// <auto-generated />
using System;
using DBContext.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBContext.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230122204248_tbl_bsf-gov_bsfname")]
    partial class tbl_bsfgov_bsfname
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("DAL.Models.Domain.BSF.BSFDepartment", b =>
                {
                    b.Property<int>("BSFDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BSFDepartmentId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BSFDepartmentId");

                    b.ToTable("BSFDepartment", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.BSF.BSFGov", b =>
                {
                    b.Property<int>("BSFGovId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BSFGovId"), 1L, 1);

                    b.Property<string>("BSFName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessPlanAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompletedComponent")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentFaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FinancialProgress")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FisibilityReportAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonCellNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FocalPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrantAlocated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Latitute")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Longitute")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("OnSitePersonCellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OnSitePersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PhysicalProgress")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TehsilName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalComponent")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalGrant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BSFGovId");

                    b.ToTable("BSFGov", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.BSF.BSFGovStage", b =>
                {
                    b.Property<int>("BSFGovStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BSFGovStageId"), 1L, 1);

                    b.Property<decimal>("AmountRelease")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BSFGovId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StageAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BSFGovStageId");

                    b.HasIndex("BSFGovId");

                    b.ToTable("BSFGovStage", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.BSF.BSFPrivate", b =>
                {
                    b.Property<int>("BSFPrivateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BSFPrivateId"), 1L, 1);

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessPlanAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessSMEName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessSector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNICAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractAwardAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FisibilityReportAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GeneralBusinessIdeaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitute")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Longitute")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("NTN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NTNAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNTN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitesupervisorContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitesupervisorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalGrant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BSFPrivateId");

                    b.HasIndex("GeneralBusinessIdeaId");

                    b.ToTable("BSFPrivate", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.BSF.BSFPrivateStage", b =>
                {
                    b.Property<int>("BSFPrivateStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BSFPrivateStageId"), 1L, 1);

                    b.Property<decimal>("AmountRelease")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BSFPrivateId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StageAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BSFPrivateStageId");

                    b.HasIndex("BSFPrivateId");

                    b.ToTable("BSFPrivateStage", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.BeneficiaryType", b =>
                {
                    b.Property<int>("BeneficiaryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BeneficiaryTypeId"), 1L, 1);

                    b.Property<string>("BeneficiaryTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BeneficiaryTypeId");

                    b.ToTable("BeneficiaryType", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.BLEPUserRole", b =>
                {
                    b.Property<int>("BLEPUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BLEPUserRoleId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BLEPUserRoleId");

                    b.ToTable("BLEPUserRole", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.CommunityInstituteMember", b =>
                {
                    b.Property<int>("CommunityInstituteMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunityInstituteMemberId"), 1L, 1);

                    b.Property<int>("CommunityInstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("MISCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalTrainingAttempt")
                        .HasColumnType("int");

                    b.HasKey("CommunityInstituteMemberId");

                    b.HasIndex("CommunityInstitutionId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("MemberId");

                    b.ToTable("CommunityInstituteMember", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.CommunityInstitution", b =>
                {
                    b.Property<int>("CommunityInstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunityInstitutionId"), 1L, 1);

                    b.Property<string>("CIAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CICode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommunityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HHParticipated")
                        .HasColumnType("int");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmittedForReview")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Longitute")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeletionFormAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmittedForReviewBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmittedForReviewOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TOPAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalHousehold")
                        .HasColumnType("int");

                    b.Property<int>("UnionCouncilId")
                        .HasColumnType("int");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("VillageId")
                        .HasColumnType("int");

                    b.Property<string>("VillageProfileAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunityInstitutionId");

                    b.HasIndex("CommunityTypeId");

                    b.HasIndex("UnionCouncilId");

                    b.HasIndex("VillageId");

                    b.ToTable("CommunityInstitution", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.CommunityType", b =>
                {
                    b.Property<int>("CommunityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunityTypeId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunityTypeId");

                    b.ToTable("CommunityType", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignationId"), 1L, 1);

                    b.Property<string>("DesignationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DesignationId");

                    b.ToTable("Designation", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.HasIndex("DivisionId");

                    b.ToTable("District", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DivisionId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvienceId")
                        .HasColumnType("int");

                    b.HasKey("DivisionId");

                    b.HasIndex("ProvienceId");

                    b.ToTable("Division", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CNIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("SectionId");

                    b.ToTable("Employee", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.EmployeeContract", b =>
                {
                    b.Property<int>("EmployeeContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeContractId"), 1L, 1);

                    b.Property<string>("EmployeeContractPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeContractId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeContract", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.GeneralBusinessIdea", b =>
                {
                    b.Property<int>("GeneralBusinessIdeaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneralBusinessIdeaId"), 1L, 1);

                    b.Property<string>("GeneralBusinessIdeaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeneralBusinessIdeaId");

                    b.ToTable("GeneralBusinessIdea", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.IdentifiedBy", b =>
                {
                    b.Property<int>("IdentifiedById")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentifiedById"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentifiedById");

                    b.ToTable("IdentifiedBy", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.LIPPackage", b =>
                {
                    b.Property<int>("LIPPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LIPPackageId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackagePrice")
                        .HasColumnType("int");

                    b.HasKey("LIPPackageId");

                    b.ToTable("LIPPackage", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BeneficiaryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CNIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseHoldNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRefugee")
                        .HasColumnType("bit");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.HasIndex("BeneficiaryTypeId");

                    b.HasIndex("VillageId");

                    b.ToTable("Member", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Provience", b =>
                {
                    b.Property<int>("ProvienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvienceId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvienceId");

                    b.ToTable("Provience", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId");

                    b.ToTable("Section", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Tehsil", b =>
                {
                    b.Property<int>("TehsilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TehsilId"), 1L, 1);

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("TehsilName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TehsilId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Tehsil", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.TrainingBy", b =>
                {
                    b.Property<int>("TrainingById")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingById"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingById");

                    b.ToTable("TrainingBy", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.TrainingHead", b =>
                {
                    b.Property<int>("TrainingHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingHeadId"), 1L, 1);

                    b.Property<string>("TrainingHeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingHeadId");

                    b.ToTable("TrainingHead", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.TrainingType", b =>
                {
                    b.Property<int>("TrainingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingTypeId"), 1L, 1);

                    b.Property<int>("TrainingHeadId")
                        .HasColumnType("int");

                    b.Property<string>("TrainingTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingTypeId");

                    b.HasIndex("TrainingHeadId");

                    b.ToTable("TrainingType", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.UnionCouncil", b =>
                {
                    b.Property<int>("UnionCouncilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnionCouncilId"), 1L, 1);

                    b.Property<int>("TehsilId")
                        .HasColumnType("int");

                    b.Property<string>("UnionCouncilName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnionCouncilId");

                    b.HasIndex("TehsilId");

                    b.ToTable("UnionCouncil", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Village", b =>
                {
                    b.Property<int>("VillageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VillageId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnionCouncilId")
                        .HasColumnType("int");

                    b.HasKey("VillageId");

                    b.HasIndex("UnionCouncilId");

                    b.ToTable("Village", "master");
                });

            modelBuilder.Entity("DAL.Models.Domain.Training.LIPAssetTransfer", b =>
                {
                    b.Property<int>("LIPAssetTransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LIPAssetTransferId"), 1L, 1);

                    b.Property<string>("AssetTransferBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AssetTransferOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CNICAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataCollectedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataCollectorDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("GRNAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentifiedById")
                        .HasColumnType("int");

                    b.Property<string>("InternalRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssetTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalReviewed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<string>("LIPCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LIPFormAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LIPPackageId")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitute")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Longitute")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("PSC")
                        .HasColumnType("int");

                    b.Property<string>("PictureAttachment1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAttachment2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAttachment3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAttachment4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectedComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmittedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmittedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("LIPAssetTransferId");

                    b.HasIndex("IdentifiedById");

                    b.HasIndex("LIPPackageId");

                    b.HasIndex("MemberId");

                    b.HasIndex("VillageId");

                    b.ToTable("LIPAssetTransfer", "training");
                });

            modelBuilder.Entity("DAL.Models.Domain.Training.LIPTraining", b =>
                {
                    b.Property<int>("LIPTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LIPTrainingId"), 1L, 1);

                    b.Property<string>("AttendanceAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("PictureAttachment1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAttachment2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAttachment3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAttachment4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionPlanAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int>("TotalFemale")
                        .HasColumnType("int");

                    b.Property<int>("TotalMale")
                        .HasColumnType("int");

                    b.Property<int>("TotalMember")
                        .HasColumnType("int");

                    b.Property<string>("TrainingFormNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TrainingOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("LIPTrainingId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TrainingTypeId");

                    b.HasIndex("VillageId");

                    b.ToTable("LIPTraining", "training");
                });

            modelBuilder.Entity("DAL.Models.Domain.Training.LIPTrainingDetail", b =>
                {
                    b.Property<int>("LIPTrainingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LIPTrainingDetailId"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LIPNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LIPTrainingId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("PSCRanking")
                        .HasColumnType("int");

                    b.HasKey("LIPTrainingDetailId");

                    b.HasIndex("LIPTrainingId");

                    b.HasIndex("MemberId");

                    b.ToTable("LIPTrainingDetail", "training");
                });

            modelBuilder.Entity("DAL.Models.Domain.Training.MemberTraining", b =>
                {
                    b.Property<int>("MemberTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberTrainingId"), 1L, 1);

                    b.Property<string>("AttendanceAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmittedForReview")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("PictureAttachment1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAttachment2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAttachment3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAttachment4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectedComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionPlanAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmittedForReviewBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmittedForReviewOnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int>("TotalMember")
                        .HasColumnType("int");

                    b.Property<string>("TrainingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TrainingOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("MemberTrainingId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TrainingTypeId");

                    b.HasIndex("VillageId");

                    b.ToTable("MemberTraining", "training");
                });

            modelBuilder.Entity("DAL.Models.Domain.Training.MemberTrainingDetail", b =>
                {
                    b.Property<int>("MemberTrainingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberTrainingDetailId"), 1L, 1);

                    b.Property<int>("CommunityInstituteMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberTrainingId")
                        .HasColumnType("int");

                    b.HasKey("MemberTrainingDetailId");

                    b.HasIndex("CommunityInstituteMemberId");

                    b.HasIndex("MemberTrainingId");

                    b.ToTable("MemberTrainingDetail", "training");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.CDSummary", b =>
                {
                    b.Property<int>("CommunityInstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunityInstitutionId"), 1L, 1);

                    b.Property<int>("Approved")
                        .HasColumnType("int");

                    b.Property<int>("CDForm")
                        .HasColumnType("int");

                    b.Property<int>("CommunityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmittedForApproval")
                        .HasColumnType("int");

                    b.Property<int>("SubmittedForReview")
                        .HasColumnType("int");

                    b.Property<string>("TehsilName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnionCouncilId")
                        .HasColumnType("int");

                    b.Property<string>("UnionCouncilName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunityInstitutionId");

                    b.HasIndex("CommunityTypeId");

                    b.HasIndex("UnionCouncilId");

                    b.ToTable("CDSummary");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Models.ApplicationUser", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("DAL.Models.Domain.BSF.BSFGovStage", b =>
                {
                    b.HasOne("DAL.Models.Domain.BSF.BSFGov", "BSFGov")
                        .WithMany()
                        .HasForeignKey("BSFGovId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BSFGov");
                });

            modelBuilder.Entity("DAL.Models.Domain.BSF.BSFPrivate", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.GeneralBusinessIdea", "GeneralBusinessIdea")
                        .WithMany()
                        .HasForeignKey("GeneralBusinessIdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralBusinessIdea");
                });

            modelBuilder.Entity("DAL.Models.Domain.BSF.BSFPrivateStage", b =>
                {
                    b.HasOne("DAL.Models.Domain.BSF.BSFPrivate", "BSFPrivate")
                        .WithMany()
                        .HasForeignKey("BSFPrivateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BSFPrivate");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.CommunityInstituteMember", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.CommunityInstitution", "CommunityInstitution")
                        .WithMany()
                        .HasForeignKey("CommunityInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityInstitution");

                    b.Navigation("Designation");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.CommunityInstitution", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.CommunityType", "CommunityType")
                        .WithMany()
                        .HasForeignKey("CommunityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.UnionCouncil", "UnionCouncil")
                        .WithMany()
                        .HasForeignKey("UnionCouncilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityType");

                    b.Navigation("UnionCouncil");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.District", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Division", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Provience", "Provience")
                        .WithMany()
                        .HasForeignKey("ProvienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provience");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Employee", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.EmployeeContract", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Member", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.BeneficiaryType", "BeneficiaryType")
                        .WithMany()
                        .HasForeignKey("BeneficiaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeneficiaryType");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Tehsil", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.TrainingType", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.TrainingHead", "TrainingHead")
                        .WithMany()
                        .HasForeignKey("TrainingHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingHead");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.UnionCouncil", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Tehsil", "Tehsil")
                        .WithMany()
                        .HasForeignKey("TehsilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tehsil");
                });

            modelBuilder.Entity("DAL.Models.Domain.MasterSetup.Village", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.UnionCouncil", "UnionCouncil")
                        .WithMany()
                        .HasForeignKey("UnionCouncilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnionCouncil");
                });

            modelBuilder.Entity("DAL.Models.Domain.Training.LIPAssetTransfer", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.IdentifiedBy", "IdentifiedBy")
                        .WithMany()
                        .HasForeignKey("IdentifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.LIPPackage", "LIPPackage")
                        .WithMany()
                        .HasForeignKey("LIPPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentifiedBy");

                    b.Navigation("LIPPackage");

                    b.Navigation("Member");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("DAL.Models.Domain.Training.LIPTraining", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.TrainingType", "TrainingType")
                        .WithMany()
                        .HasForeignKey("TrainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TrainingType");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("DAL.Models.Domain.Training.LIPTrainingDetail", b =>
                {
                    b.HasOne("DAL.Models.Domain.Training.LIPTraining", "LIPTraining")
                        .WithMany()
                        .HasForeignKey("LIPTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LIPTraining");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DAL.Models.Domain.Training.MemberTraining", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.TrainingType", "TrainingType")
                        .WithMany()
                        .HasForeignKey("TrainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TrainingType");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("DAL.Models.Domain.Training.MemberTrainingDetail", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.CommunityInstituteMember", "CommunityInstituteMember")
                        .WithMany()
                        .HasForeignKey("CommunityInstituteMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.Training.MemberTraining", "MemberTraining")
                        .WithMany()
                        .HasForeignKey("MemberTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityInstituteMember");

                    b.Navigation("MemberTraining");
                });

            modelBuilder.Entity("DAL.Models.ViewModels.CDSummary", b =>
                {
                    b.HasOne("DAL.Models.Domain.MasterSetup.CommunityType", "CommunityType")
                        .WithMany()
                        .HasForeignKey("CommunityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Domain.MasterSetup.UnionCouncil", "UnionCouncil")
                        .WithMany()
                        .HasForeignKey("UnionCouncilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunityType");

                    b.Navigation("UnionCouncil");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
