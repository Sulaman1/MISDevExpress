@using BLEPMIS.Controllers;
@using Newtonsoft.Json;

@{   
    ViewBag.Title = "Result Framework";
    ViewBag.pTitle = "Result Framework";
    ViewBag.pageTitle = "Dashboard";
    Layout = "~/Views/_Shared/_Layout.cshtml";
}
@*@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@*@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    var c = 0;

    var grandT = ViewBag.gT;
    var femaleCBTT = ViewBag.fCBTT;
    var maleCBTT = ViewBag.mCBTT;

    var perLIP = ViewBag.PerLIP;
    var perBSF = ViewBag.PerBSF;    
    var perCICIG = ViewBag.PerCICIG;

    var benefRFLIP = ViewBag.LipRFBenef;
    var benefHOSTLIP = ViewBag.LipHOSTBenef;
    var benefBSF = ViewBag.BSFBenef;
    var benefHTS = ViewBag.HTSBenef;
    var benefFemaleCICIG = ViewBag.CICIGFemaleBenef;
    var benefMaleCICIG = ViewBag.CICIGMaleBenef;
    var benefCICIGFormed = ViewBag.CICIFormed;


    var TBBarData = ViewBag.TBBarChartData;
    var bsfList = ViewBag.BSFList;
    var bsfGov2 = ViewBag.BsfGov2;
    var cicigList = ViewBag.CICIGList;
    var cicigBenf = ViewBag.CICIgBenfList;
    var totalBenf = ViewBag.TotalBenf;

    var trainingEv = ViewBag.trainingEvents;
    var htsList = ViewBag.HTSList;
    var edpList = ViewBag.EDPList;
    var lipBifurHostData = ViewBag.LipBifurHostData;
    var lipBifurRefData = ViewBag.LipBifurRefData;
    var htsTable = ViewBag.HTSTable;

    var TProgress = ViewBag.PTotal;

    var jsonData = @"[
            {
                ""district"": ""Killa Abdullah"",
                ""male"": 0,
                ""female"": 0,
                ""refugeemale"": 248,
                ""refugeefemale"": 62,
                ""total"": 310
            },
            {
                ""district"": ""Killa Saifullah"",
                ""male"": 0,
                ""female"": 0,
                ""refugeemale"": 248,
                ""refugeefemale"": 124,
                ""total"": 372
            },
            {
                ""district"": ""Sherani"",
                ""male"": 0,
                ""female"": 0,
                ""refugeemale"": 0,
                ""refugeefemale"": 0,
                ""total"": 0
            },
            {
                ""district"": ""Chagai"",
                ""male"": 0,
                ""female"": 0,
                ""refugeemale"": 504,
                ""refugeefemale"": 64,
                ""total"": 568
            },
            {
                ""district"": ""Nushki"",
                ""male"": 0,
                ""female"": 0,
                ""refugeemale"": 248,
                ""refugeefemale"": 62,
                ""total"": 310
            },
            {
                ""district"": ""Pishin"",
                ""male"": 0,
                ""female"": 0,
                ""refugeemale"": 248,
                ""refugeefemale"": 62,
                ""total"": 310
            },
            {
                ""district"": ""Zhob"",
                ""male"": 0,
                ""female"": 0,
                ""refugeemale"": 248,
                ""refugeefemale"": 62,
                ""total"": 310
            },
            {
                ""district"": ""Mastung"",
                ""male"": 0,
                ""female"": 0,
                ""refugeemale"": 256,
                ""refugeefemale"": 64,
                ""total"": 320
            }
        ]";

    List<BarData> tvtList = JsonConvert.DeserializeObject<List<BarData>>(jsonData);


}

<!-- Resources AMCHARTS 4 -->
<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>

<!-- Resources AMCHARTS 5 -->
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/percent.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script src="https://cdn.amcharts.com/lib/5/radar.js"></script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js" charset="utf-8"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/easy-pie-chart/2.1.6/jquery.easypiechart.min.js" charset="utf-8"></script>

<!-- Styles -->
<style>
     .progress {
    position: relative;
    width: 100%;
    height: 20px;
    background-color: #ccc;
  }

    .tableBorder {
      border: 3px solid black;
  }

  .progress-bar {
    width: 0;
    height: 100%;
    background-color: #007bff;
    transition: width 4s; /* Transition duration */
  }

  /* Add a keyframe animation */
  @@keyframes fillProgress {
    0% {
      width: 0;
    }
    100% {
      width: @TProgress%;
    }
  }

  /* Apply the animation */
  .progress-bar.animated {
    animation: fillProgress 2s ease-in-out forwards; /* Animation duration and timing function */
  }


    #chartdiv {
        /*width: 100%;*/
        height: 500px;
    }

    #main {
        /*height: 500px;*/
        /*width: 100%;*/
        /*border-top: 2px solid black;*/
    }

    #topRow{
        border: 2px solid black;
        height:200px;
    }

    #mainDiv {
        width: 100%;
        /*height: 250px;*/
        position: relative;
        /*border-bottom: 2px solid black;*/
    }

    #mainDiv2 {
        width: 50%;
        height: 500px;
       
        position: absolute;
    }

    #mainDiv3 {
        width: 50%;
        height: 500px;
        /*padding: 10px;*/
        position: relative;
    }

    #chartdivPerLIP {
        width: 16.6%;
        height: 100%;
        /*border-radius: 100%;*/
        /*border-left: 2px solid black;*/
        border-right: 2px solid black;
        /* border: 2px solid purple;*/
    }

    #chartdivPerBSF {
        width: 16.6%;
        height: 100%;
        /*border-radius: 100%;*/
        /*border-left: 2px solid black;*/
        border-right: 2px solid black;
        /* border: 2px solid purple;*/
    }


    #chartdivPerTunnels {
        width: 16.6%;
        height: 100%;
        /*border-radius: 100%;*/
        border-right: 2px solid black;
    }

    #chartdivPerCBT {
        width: 16.6%;
        height: 100%;
        /*border-radius: 100%;*/
        /*border-left: 2px solid black;*/
        border-right: 2px solid black;
        /* border: 2px solid purple;*/
    }

    #chartdivPerEBP {
        width: 16.6%;
        height: 100%;
        /*border-radius: 100%;*/
        /*border-left: 2px solid black;*/
        /*border-right: 2px solid black;*/
        /* border: 2px solid purple;*/
    }

    #chartdivPerEBP2 {
        width: 16.6%;
        height: 100%;
        /*border-radius: 100%;*/
        /*border-left: 2px solid black;*/
        border-right: 2px solid black;
        /* border: 2px solid purple;*/
    }


    .ib {
        display: inline-block;
        margin: -2px;
        padding: 0%;
        /*border: 1px solid blue;*/
    }

    .ib2 {
        display: inline-block;
        padding: 0%;
        /*border: 1px solid blue;*/
    }

    #guagechartdiv {
        width: 100%;
        height: 500px;
    }

    #solidguage {
        width: 100%;
        height: 500px;
    }

</style>

<!-- Button Style-->
<style>

    /* CSS */
    .button-10 {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 6px 14px;
        font-family: -apple-system, BlinkMacSystemFont, 'Roboto', sans-serif;
        border-radius: 6px;
        border: none;
        color: #fff;
        background: linear-gradient(180deg, #4B91F7 0%, #367AF6 100%);
        background-origin: border-box;
        box-shadow: 0px 0.5px 1.5px rgba(54, 122, 246, 0.25), inset 0px 0.8px 0px -0.25px rgba(255, 255, 255, 0.2);
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
    }

        .button-10:hover {
            box-shadow: inset 0px 0.8px 0px -0.25px rgba(255, 255, 255, 0.2), 0px 0.5px 1.5px rgba(54, 122, 246, 0.25), 0px 0px 0px 3.5px rgba(58, 108, 217, 0.5);
            outline: 0;
        }
</style>

<script>
    var count1 = 0
    var count2 = 0
    var count3 = 0
    var count4 = 0
    var count5 = 0
    var count6 = 0

    var root1;
    var root2;
    var root3;

    var fsize;
    var seriesFontSize = 12;
    var labelPosition = 1.5;

    var edpdata = [{
        "district": "Killa Abdullah",
        "male": 0,
        "female": 0


    }, {
        "district": "Killa Saifullah",
        "male": 0,
        "female": 0

    }, {
        "district": "Sherani",
        "male": 0,
        "female": 0

    }, {
        "district": "Chagai",
        "male": 0,
        "female": 0

    },
    {
        "district": "Nushki",
        "male": 0,
        "female": 0

    },
    {
        "district": "Pishin",
        "male": 0,
        "female": 0

    },
    {
        "district": "Zhob",
        "male": 0,
        "female": 0

    },
    {
        "district": "Mastung",
        "male": 0,
        "female": 0

    }]


    /*
    var fsize = "0.8em" , 18
    centerY: 140, 200
    radius:-40, -70

    series0: fontSize="0.8em"

    series1: fontSize=7, 12

    serieslabelposition= 1, 2
    */
   var s3LabelSizeMax = 18;
   var s3LabelCenterYMax = 200;
   var s3Radius = -70;
   var s3CIRadius = -80;
   var s0LabelSizeMax = 12;
   var s1LabelSizeMax = 12;
   var sLabelPosition = 8;

    console.log("SCREEN SIZE:...", window.innerWidth)
    if (window.innerWidth < 768) {
        console.log("SCREEN SIZE IS LESS THAN 768...")

        s3LabelSizeMax = 9;
        s3LabelCenterYMax = 120;
        s3Radius = -34;
        s3CIRadius = -40;
        s0LabelSizeMax = 6;
        s1LabelSizeMax = 6;
        sLabelPosition = 5;
          
    }

        if (window.innerWidth > 1500) {
        console.log("SCREEN SIZE IS GREATER THAN 1500...")

        s3LabelSizeMax = 18;
        s3LabelCenterYMax = 225;
        s3Radius = -78;
        s3CIRadius = -90;
        s0LabelSizeMax = 12;
        s1LabelSizeMax = 12;
        sLabelPosition = 8;
          
    }

    var seriesList = []

    // Function to update the variable based on screen size
    function updateScreenSize() {
        console.log("update...")
        var seriesList = []
        var firstrow = document.getElementById("topRow");
         console.log("update series1: ", seriesList)

        if (window.innerWidth < 768) {
            console.log("less than 768...")
            firstrow.style.height = "100px";
            fsize = 10;
            seriesFontSize = 8;
            labelPosition = 1;
            screenSize = "small";
            
            if (root1) {
                root1.dispose()
                activateRoot1()
            }
            if (root2) {
                root2.dispose()
                activateRoot2()
            }
            if (root3) {
                root3.dispose()
                activateRoot3()
            }

        } else if (window.innerWidth < 1024) {
            console.log("less than 1024...")
            firstrow.style.height = "150px";

            fsize = 15;
            seriesFontSize = 12;
            labelPosition = 1.5;
            screenSize = "medium";
            
            if (root1) {
                root1.dispose()
                activateRoot1()
            }
            if (root2) {
                root2.dispose()
                activateRoot2()
            }
            if (root3) {
                root3.dispose()
                activateRoot3()
            }
        } else {
            console.log("large...")
            firstrow.style.height = "200px";
            fsize = 18;
            seriesFontSize = 12;
            labelPosition = 1.5;
            screenSize = "large";
            
            if (root1) {
                root1.dispose()
                activateRoot1()
            }
            if (root2) {
                root2.dispose()
                activateRoot2()
            }
            if (root3) {
                root3.dispose()
                activateRoot3()
            }
        }
        console.log("update series2: ", seriesList)
        // Display the value of the variable in the HTML
        //var screenSizeValueElement = document.getElementById("screenSizeValue");
        //screenSizeValueElement.textContent = screenSize + fsize
    }

    // Call the function on page load
    window.onload = function () {
        updateScreenSize();

        // Call the function whenever the window is resized
        window.onresize = updateScreenSize;
    };


</script>

<!-- Chart code -->
<script>

    var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                activateRoot1()
            }
        };
    })();
    initializeData()

    function activateRoot1() {
       
    am5.ready(function () {

        // Create root7 element
        // https://www.amcharts.com/docs/v5/getting-started/#Root_element
        var root1 = am5.Root.new("chartdivPerLIP");

        // Set themes
        // https://www.amcharts.com/docs/v5/concepts/themes/
        root1.setThemes([
            am5themes_Animated.new(root1)
        ]);

        // Create chart
        // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
        // start and end angle must be set both for chart and series
        var chart1 = root1.container.children.push(
            am5percent.PieChart.new(root1, {
                width: am5.percent(110),
                height: am5.percent(100),
                x: am5.percent(-5),
                layout: root1.verticalLayout,
                //minWidth: 100
            })
        );


            chart1.events.on("click", (event) => {
                var activeRoot = "";
                var rootArray = [];

                count2 = 0;
                count3 = 0;
                count4 = 0;
                count5 = 0;
                count6 = 0;

                if (count1 == 0) {
                    count1 = 1

                console.log("ClickedLIP", event.target.series._values.at(0))
               

                document.getElementById("title").innerHTML = "Livelihood Investment Plan"


                var tI = document.getElementById("totaltableI");
                if (tI.style.display === "block") {
                    tI.style.display = "none";
                }
                var allI = document.getElementById("IntertableI");
                    if (allI.style.display === "block") {
                        allI.style.display = "none";
                    }
                    
                var xI = document.getElementById("liptableI");
                if (xI.style.display === "none") {
                    xI.style.display = "block";
                }

                var yI = document.getElementById("bsftableI");
                if (yI.style.display === "block") {
                    yI.style.display = "none";
                }
                    
                var y1I = document.getElementById("cbttableI");
                if (y1I.style.display === "block") {
                    y1I.style.display = "none";
                }

                    
                                
                var y2I = document.getElementById("htstableI");
                if (y2I.style.display === "block") {
                    y2I.style.display = "none";
                }
                    var y3I = document.getElementById("edptableI");
                    if (y3I.style.display === "block") {
                        y3I.style.display = "none";
                    }
                    var y4I = document.getElementById("tvttableI");
                    if (y4I.style.display === "block") {
                        y4I.style.display = "none";
                    }

                var t = document.getElementById("totaltable");
                if (t.style.display === "block") {
                    t.style.display = "none";
                }

                var htsF = document.getElementById("htsFulltable");
                if(htsF.style.display === "block"){
                    htsF.style.display = "none";
                }

                var x = document.getElementById("liptable");
                if (x.style.display === "none") {
                    x.style.display = "block";
                }

                var lipbifurtitle = document.getElementById("lipbifurtitle");
                if (lipbifurtitle.style.display === "none") {
                    lipbifurtitle.style.display = "block";
                }

                var lipbifurtable = document.getElementById("lipbifurtable");
                if (lipbifurtable.style.display === "none") {
                    lipbifurtable.style.display = "block";
                }             
                
                var lipbifurtable2 = document.getElementById("lipbifurtable2");
                if (lipbifurtable2.style.display === "none") {
                    lipbifurtable2.style.display = "block";
                }

                var y = document.getElementById("bsftable");
                if (y.style.display === "block") {
                    y.style.display = "none";
                }

                var htitle = document.getElementById("htstitle");               
                if(htitle.style.display === "block"){
                    htitle.style.display = "none";
                }                  

                var hts = document.getElementById("htstable");
                if (hts.style.display === "block") {
                    hts.style.display = "none";
                }

                var y1 = document.getElementById("cbttable");
                if (y1.style.display === "block") {
                    y1.style.display = "none";
                }
                    var y2 = document.getElementById("cicigtitle");
                if (y2.style.display === "block") {
                    y2.style.display = "none";
                }
                    var y3 = document.getElementById("cicigtable");
                if (y3.style.display === "block") {
                    y3.style.display = "none";
                }
                    
                    

                    var y4 = document.getElementById("edptable");
                    if (y4.style.display === "block") {
                        y4.style.display = "none";
                    }
                    var y5 = document.getElementById("chartdivedp");
                    if (y5.style.display === "block") {
                        y5.style.display = "none";
                    }
                    var y6 = document.getElementById("tvttable");
                    if (y6.style.display === "block") {
                        y6.style.display = "none";
                    }
                   
                   
                var a = document.getElementById("labeltablelip");
                if (a.style.display === "none") {
                    a.style.display = "block";
                }

                    var aa = document.getElementById("labeltablehts");
                    if (aa.style.display === "block") {
                        aa.style.display = "none";
                    }

                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "block") {
                    b.style.display = "none";
                }
                var b1 = document.getElementById("labeltablecbt");
                if (b1.style.display === "block") {
                    b1.style.display = "none";
                }

                var xx = document.getElementById("chartdiv");
                if (xx.style.display === "none") {
                    xx.style.display = "block";
                }

                var yy = document.getElementById("chartdiv2");
                if (yy.style.display === "block") {
                    yy.style.display = "none";
                }

                var z1 = document.getElementById("chartdivbsf1");
                if (z1.style.display === "block") {
                    z1.style.display = "none";
                }
                    var z4 = document.getElementById("chartdivbsfline");
                    if (z4.style.display === "block") {
                        z4.style.display = "none";
                    }
                
                    
                    var htschart = document.getElementById("chartdivhts");
                    if (htschart.style.display === "block") {
                        htschart.style.display = "none";
                    }


                var z2 = document.getElementById("chartdivbsf2");
                if (z2.style.display === "block") {
                    z2.style.display = "none";
                }

                var z3 = document.getElementById("chartdivtvt1");
                if (z3.style.display === "block") {
                    z3.style.display = "none";
                }
                var z4 = document.getElementById("chartdivtvt2");
                if (z4.style.display === "block") {
                    z4.style.display = "none";
                }

                var zz3 = document.getElementById("cbtChartDiv2");
                if (zz3.style.display === "block") {
                    zz3.style.display = "none";
                }

                    


                if (root6) {
                    root6.dispose()
                }
                if (root11) {
                    root11.dispose()
                }



                //var s = event.target.series._values.at(2);
                //s.slices.template.setAll({
                //    fill: am5.color(0xff300f),
                //    stroke: am5.color(0xff300f)
                //})

                //console.log("sfasf: ", seriesList)

                //count2 = 0

                //First Chart
                seriesList[0].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })
                seriesList[1].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })

                seriesList[0].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });
                seriesList[1].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });


                //Second Chart
                seriesList[3].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[4].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Third Chart
                seriesList[6].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[7].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fourth Chart
                seriesList[9].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[10].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fifth Chart
                seriesList[12].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[13].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Sixth Chart
                seriesList[15].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[16].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                var LIPBarData = [
                    @{
                        foreach (var m in TBBarData)
                        {
                                                    <text>{
                                                            'category': '@m.District',
                                                            'male': @m.Male,
                                                            'female': @m.Female,
                                                            'refugeemale': @m.RefugeeMale,
                                                            'refugeefemale': @m.RefugeeFemale,
                                                            'total': @m.Total
                                                         }, 
                                                    </text>
                        }
                    }
                ];

                //LIP DATA (LIPBarData)         
                rerender(LIPBarData, 0, "lip")
                }
            });

            // Create series
            var series3 = chart1.series.push(
                am5percent.PieSeries.new(root1, {
                    valueField: "value",
                    categoryField: "category",
                    cursorOverStyle: "pointer",
                    //alignLabels: true,
                    radius: am5.percent(70),
                    //innerRadius: am5.percent(50)
                })
            );

            series3.data.setAll([
                {
                    category: "LIP",
                    value: @perLIP
                }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })
           
            series3.labels.template.setAll({
                text: "LIP", //"LIP {value}%"
                fontSize: s3LabelSizeMax, //fsize, 1.4
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                //inside: false,
                //centerX: am5.percent(250),               
                centerY: am5.percent(s3LabelCenterYMax),//140
                //x: am5.percent(90),
                radius: s3Radius,//-50
                
            });                        


            // Disabling labels, ticks and toggling
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");
            series3.set(
                "tooltip",
                am5.Tooltip.new(root1, {
                    forceHidden: true,
                })
            );
            //series3.dataFields.value = "value";
            //series3.slices.template.tooltipText = "{category}";
            //series3.tooltip = null;
            //series3.getTooltip().disabled = true;


        // Create series
        // https://www.amchart1s.com/docs/v5/chart1s/percent-chart1s/pie-chart1/#Series
        // start and end angle must be set both for chart1 and series
        var series0 = chart1.series.push(
            am5percent.PieSeries.new(root1, {
                valueField: "value",
                categoryField: "category",
                alignLabels: true,
                radius: am5.percent(100),
                innerRadius: am5.percent(50)
            })
        );

        series0.states.create("hidden", {
            startAngle: 180,
            endAngle: 180
        });

        series0.slices.template.setAll({
            fillOpacity: 0.5,
            strokeOpacity: 0,
            templateField: "settings"
        });

        series0.slices.template.states.create("hover", { scale: 1 });
        series0.slices.template.states.create("active", { shiftRadius: 0 });

        //series0.labels.template.setAll({
        //    templateField: "settings"
        //});

        series0.ticks.template.setAll({
            //templateField: "settings"
            forceHidden: true,
            
        });

        //series0.labels.template.setAll({
        //    textType: "circular",
        //    radius: 30,

        //});
           

            series0.labels.template.setAll({
                fontSize: s0LabelSizeMax,
                forceHidden: true
            });


        // Set data
        // https://www.amchart1s.com/docs/v5/chart1s/percent-chart1s/pie-chart1/#Setting_data
        series0.data.setAll([
            {
                category: "Done",
                value: @perLIP
            },
            {
                category: "Unused",
                value: 100 - @perLIP //, settings: { forceHidden: true }
            }
        ]);

            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

        // Create series
        // https://www.amchart1s.com/docs/v5/chart1s/percent-chart1s/pie-chart1/#Series
        // start and end angle must be set both for chart1 and series
        var series1 = chart1.series.push(
            am5percent.PieSeries.new(root1, {
                radius: am5.percent(65),
                innerRadius: am5.percent(85),
                valueField: "value",
                categoryField: "category",
                alignLabels: false
            })
        );

        series1.states.create("hidden", {
            startAngle: 180,
            endAngle: 180
        });

        series1.slices.template.setAll({
            templateField: "sliceSettings",
            strokeOpacity: 0
        });

        series1.labels.template.setAll({
            fontSize: s1LabelSizeMax,
            textType: "circular"
        });

        series1.labels.template.set("tooltipText", "{category}: {value}");
        series1.labels.template.setup = function (target) {
            target.set("background", am5.Rectangle.new(root1, {
                fill: am5.color(0x000000),
                fillOpacity: 0
            }));
        }

        series1.labels.template.adapters.add("radius", function (radius, target) {
            var dataItem = target.dataItem;
            var slice = dataItem.get("slice");
                return -(slice.get("radius") - slice.get("innerRadius")) / sLabelPosition;
        });

        series1.slices.template.states.create("hover", { scale: 1 });
        series1.slices.template.states.create("active", { shiftRadius: 0 });

        series1.ticks.template.setAll({
            forceHidden: true
        });

            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

        // Set data
        // https://www.amchart1s.com/docs/v5/chart1s/percent-chart1s/pie-chart1/#Setting_data
        series1.data.setAll([{
            category: "Done",
            value: @perLIP
        },
        //{
        //    category: "Second",
        //    value: 30
        //},
        {
            category: "Remaining",
            value: 100 - @perLIP,
            sliceSettings: { fill: am5.color(0xdedede) }
        }]);

        


        seriesList.push(series0);
        seriesList.push(series1);
        seriesList.push(series3);        

    }); // end am5.ready()
    }

</script>

<!-- Chart code -->
<script>

        var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                activateRoot2()
            }
        };
    })();
    initializeData()

    function activateRoot2() {        

        am5.ready(function () {

            // Create root2 element
            // https://www.amchart1s.com/docs/v5/getting-started/#Root_element
            var root2 = am5.Root.new("chartdivPerBSF");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root2.setThemes([
                am5themes_Animated.new(root2)
            ]);

            // Create chart
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
            // start and end angle must be set both for chart and series
            var chart2 = root2.container.children.push(
                am5percent.PieChart.new(root2, {
                    width: am5.percent(110),
                    height: am5.percent(100),
                    x: am5.percent(-5),
                    layout: root2.verticalLayout
                })
            );


            
                chart2.events.on("click", (event) => {
                    var activeRoot = "";
                    var rootArray = [];

                    count1 = 0;
                    count3 = 0;
                    count4 = 0;
                    count5 = 0;
                    count6 = 0;

                if (count2 == 0) {
                    count2 = 1
                    document.getElementById("title").innerHTML = "Business Support Facility"


                    var xx = document.getElementById("chartdiv");
                    if (xx.style.display === "block") {
                        xx.style.display = "none";
                    }

                    var yy = document.getElementById("chartdiv2");
                    if (yy.style.display === "none") {
                        yy.style.display = "block";
                    }


                    var a = document.getElementById("labeltablelip");
                    if (a.style.display === "block") {
                        a.style.display = "none";
                    }
                    var aa = document.getElementById("labeltablehts");
                    if (aa.style.display === "block") {
                        aa.style.display = "none";
                    }

                    var b = document.getElementById("labeltablebsf");
                    if (b.style.display === "none") {
                        b.style.display = "block";
                    }

                    var b1 = document.getElementById("labeltablecbt");
                    if (b1.style.display === "block") {
                        b1.style.display = "none";
                    }

                    var tI = document.getElementById("totaltableI");
                    if (tI.style.display === "block") {
                        tI.style.display = "none";
                    }
                    var allI = document.getElementById("IntertableI");
                    if (allI.style.display === "block") {
                        allI.style.display = "none";
                    }
                    var xI = document.getElementById("liptableI");
                    if (xI.style.display === "block") {
                        xI.style.display = "none";
                    }

                    var yI = document.getElementById("bsftableI");
                    if (yI.style.display === "none") {
                        yI.style.display = "block";
                    }

                    var y1I = document.getElementById("cbttableI");
                    if (y1I.style.display === "block") {
                        y1I.style.display = "none";
                    }

                    var y2I = document.getElementById("htstableI");
                    if (y2I.style.display === "block") {
                        y2I.style.display = "none";
                    }
                    var y3I = document.getElementById("edptableI");
                    if (y3I.style.display === "block") {
                        y3I.style.display = "none";
                    }
                    var y4I = document.getElementById("tvttableI");
                    if (y4I.style.display === "block") {
                        y4I.style.display = "none";
                    }

                    var t = document.getElementById("totaltable");
                    if (t.style.display === "block") {
                        t.style.display = "none";
                    }

                    var htsF = document.getElementById("htsFulltable");
                    if(htsF.style.display === "block"){
                        htsF.style.display = "none";
                    }

                    var x = document.getElementById("liptable");
                    if (x.style.display === "block") {
                        x.style.display = "none";
                    }
                                    var lipbifurtitle = document.getElementById("lipbifurtitle");
                if (lipbifurtitle.style.display === "block") {
                    lipbifurtitle.style.display = "none";
                }

                var lipbifurtable = document.getElementById("lipbifurtable");
                if (lipbifurtable.style.display === "block") {
                    lipbifurtable.style.display = "none";
                }
                                var lipbifurtable2 = document.getElementById("lipbifurtable2");
                if (lipbifurtable2.style.display === "block") {
                    lipbifurtable2.style.display = "none";
                }

                    var y = document.getElementById("bsftable");
                    if (y.style.display === "none") {
                        y.style.display = "block";
                    }

                    var htitle = document.getElementById("htstitle");
                    if (htitle.style.display === "block") {                        
                        htitle.style.display = "none";
                    }

                    var hts = document.getElementById("htstable");
                    if (hts.style.display === "block") {
                        hts.style.display = "none";
                    }

                    var y1 = document.getElementById("cbttable");
                    if (y1.style.display === "block") {
                        y1.style.display = "none";
                    }
                    var y2 = document.getElementById("cicigtitle");
                    if (y2.style.display === "block") {
                        y2.style.display = "none";
                    }
                    var y3 = document.getElementById("cicigtable");
                    if (y3.style.display === "block") {
                        y3.style.display = "none";
                    }
                    var y4 = document.getElementById("edptable");
                    if (y4.style.display === "block") {
                        y4.style.display = "none";
                    }
                    var y5 = document.getElementById("chartdivedp");
                    if (y5.style.display === "block") {
                        y5.style.display = "none";
                    }
                    var y6 = document.getElementById("tvttable");
                    if (y6.style.display === "block") {
                        y6.style.display = "none";
                    }

                    var z1 = document.getElementById("chartdivbsf1");
                    if (z1.style.display === "none") {
                        z1.style.display = "block";
                    }
                    var z4 = document.getElementById("chartdivbsfline");
                    if (z4.style.display === "none") {
                        z4.style.display = "block";
                    }
                    var htschart = document.getElementById("chartdivhts");
                    if (htschart.style.display === "block") {
                        htschart.style.display = "none";
                    }
                    var z2 = document.getElementById("chartdivbsf2");
                    if (z2.style.display === "none") {
                        z2.style.display = "block";
                    }
                    var z3 = document.getElementById("chartdivtvt1");
                    if (z3.style.display === "block") {
                        z3.style.display = "none";
                    }
                    var z4 = document.getElementById("chartdivtvt2");
                    if (z4.style.display === "block") {
                        z4.style.display = "none";
                    }


                    var zz3 = document.getElementById("cbtChartDiv2");
                    if (zz3.style.display === "block") {
                        zz3.style.display = "none";
                    }




                    console.log("Clicked", event.target._root.dom.id)

                    console.log(`
                            seriesList: ${seriesList}
                        `)

                    //First Chart
                    seriesList[0].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[1].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })

                    //Second Chart
                    seriesList[3].slices.template.setAll({
                        fill: am5.color(0x87ad20),
                        stroke: am5.color(0x87ad20)
                    })
                    seriesList[4].slices.template.setAll({
                        fill: am5.color(0x87ad20),
                        stroke: am5.color(0x87ad20)
                    })

                    seriesList[3].animate({
                        key: "startAngle",
                        to: 180,
                        loops: 1,
                        duration: 2000,
                        easing: am5.ease.yoyo(am5.ease.cubic)
                    });
                    seriesList[4].animate({
                        key: "startAngle",
                        to: 180,
                        loops: 1,
                        duration: 2000,
                        easing: am5.ease.yoyo(am5.ease.cubic)
                    });

                    //Third Chart
                    seriesList[6].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[7].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })

                    //Fourth Chart
                    seriesList[9].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[10].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })

                    //Fifth Chart
                    seriesList[12].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[13].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })

                    //Sixth Chart
                    seriesList[15].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[16].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })

                    var BSFBarData = [
    @{
        foreach (var m in bsfList)
        {
                                    <text>{
                                                            'category': '@m.District',
                                                            'government': @m.Government,
                                                            'private': @m.Private
                                                                                 },
                                    </text>
        }
    }
                        ];

                    
                    var BSFGov2 = [
    @{
        foreach (var m in bsfGov2)
        {
                                    <text>{
                                                            'category': '@m.District',
                                                            'livestock': @m.LiveStock,
                                                            'forest': @m.Forest
                                                                                             },
                                    </text>
        }
    }
                            ];


                    var HtsData = [
    @{
        foreach(var m in htsList)
        {
                                    <text>
                                        {
                                            'sector': '@m.District',
                                            'male': @m.Male,
                                            'female': @m.Female
                                        },
                                    </text>
        }
    }
                        ]


                    var databsf2 = [{
                        "sector": "Forest",
                        "male": 0,
                        "female": 0

                    }, {
                        "sector": "Mines",
                        "male": 0,
                        "female": 0
                    },
                    {
                        "sector": "Industry",
                        "male": 0,
                        "female": 0
                    },
                    {
                        "sector": "Tourism",
                        "male": 0,
                        "forest": 0
                    },
                    {
                        "sector": "Agriculture",
                        "male": 0,
                        "forest": 0
                    }, {
                        "sector": "Livestock",
                        "male": 0,
                        "female": 0
                    }]


                    //if(count2 == 0){

                    if (root6) {
                        root6.dispose()
                    }
                    if (root11) {
                        root11.dispose()
                    }
                    if (root12) {
                        root12.dispose()
                    }
                    if (root13) {
                        root13.dispose()
                    }if (root17) {
                        root17.dispose()
                    }
                    renderBSF(BSFBarData)
                    renderbsf1(BSFGov2)
                    renderbsf2(databsf2)
                    renderhts(HtsData)
                
                    }
                });
                        

            // Create series
            var series3 = chart2.series.push(
                am5percent.PieSeries.new(root2, {
                    valueField: "value",
                    categoryField: "category",
                    //alignLabels: true,
                    cursorOverStyle: "pointer",
                    //alignLabels: true,
                    radius: am5.percent(70),
                    fill: am5.color(0x000000)
                    //radius: am5.percent(100),
                    //innerRadius: am5.percent(50)
                })
            );


            series3.data.setAll([
                {
                    category: "BSF",
                    value: @perBSF
                }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })



            series3.labels.template.setAll({
                text: "BSF",
                fontSize: s3LabelSizeMax,
                opacity: 1,
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                inside: false,
                //centerX: am5.percent(250),
                centerY: am5.percent(s3LabelCenterYMax),
                //x: am5.percent(90),
                radius: s3Radius,
                fill: am5.color(0x000000)
            });

            // Disabling labels and ticks
            //series.labels.template.set("visible", false);
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");
            series3.set(
                "tooltip",
                am5.Tooltip.new(root2, {
                    forceHidden: true,
                })
            );

            // Create series
            // https://www.amchart2s.com/docs/v5/chart2s/percent-chart2s/pie-chart2/#Series
            // start and end angle must be set both for chart2 and series
            var series0 = chart2.series.push(
                am5percent.PieSeries.new(root2, {
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: true,
                    radius: am5.percent(100),
                    innerRadius: am5.percent(50)
                })
            );

            series0.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series0.slices.template.setAll({
                fillOpacity: 0.5,
                strokeOpacity: 0,
                templateField: "settings"
            });

            series0.slices.template.states.create("hover", { scale: 1 });
            series0.slices.template.states.create("active", { shiftRadius: 0 });

            //series0.labels.template.setAll({
            //    templateField: "settings"
            //});

            series0.ticks.template.setAll({
                //templateField: "settings"
                forceHidden: true
            });

            //series0.labels.template.setAll({
            //    textType: "circular",
            //    radius: 30,

            //});
            series0.labels.template.setAll({
                fontSize: s0LabelSizeMax,
                forceHidden: true
            });


            // Set data
            // https://www.amchart2s.com/docs/v5/chart2s/percent-chart2s/pie-chart2/#Setting_data
            series0.data.setAll([
                {
                    category: "Done",
                    value: @perBSF
                },
                {
                    category: "Unused",
                    value: 100 - @perBSF,
                    settings: { forceHidden: true }
                }
            ]);

            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Create series
            // https://www.amchart2s.com/docs/v5/chart2s/percent-chart2s/pie-chart2/#Series
            // start and end angle must be set both for chart2 and series
            var series1 = chart2.series.push(
                am5percent.PieSeries.new(root2, {
                    radius: am5.percent(65),
                    innerRadius: am5.percent(85),
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: false
                })
            );

            series1.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series1.slices.template.setAll({
                templateField: "sliceSettings",
                strokeOpacity: 0
            });

            series1.labels.template.setAll({
                fontSize: s1LabelSizeMax,
                textType: "circular"
            });          


            series1.labels.template.adapters.add("radius", function (radius, target) {
                var dataItem = target.dataItem;
                var slice = dataItem.get("slice");
                return -(slice.get("radius") - slice.get("innerRadius")) / sLabelPosition;
            });

            series1.slices.template.states.create("hover", { scale: 1 });
            series1.slices.template.states.create("active", { shiftRadius: 0 });

            series1.ticks.template.setAll({
                forceHidden: true
            });


            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Set data
            // https://www.amchart2s.com/docs/v5/chart2s/percent-chart2s/pie-chart2/#Setting_data
            series1.data.setAll([{
                category: "Done",
                value: @perBSF
            },
            //{
            //    category: "Second",
            //    value: 30
            //},
            {
                category: "Remaining",
                value: 100 - @perBSF,
                sliceSettings: { fill: am5.color(0xdedede) }
            }]);

            //series1.animate({
            //    key: "startAngle",
            //    to: 180,
            //    loops: Infinity,
            //    duration: 2000,
            //    easing: am5.ease.yoyo(am5.ease.cubic)
            //});

            seriesList.push(series0);
            seriesList.push(series1);
            seriesList.push(series3);


        }); // end am5.ready()

}
</script>

<!-- Chart code -->
<script>

    var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                activateRoot99()
            }
        };
    })();
    initializeData()

    function activateRoot99() {        

        am5.ready(function () {

            // Create root2 element
            // https://www.amchart1s.com/docs/v5/getting-started/#Root_element
            var root99 = am5.Root.new("chartdivPerTunnels");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root99.setThemes([
                am5themes_Animated.new(root99)
            ]);

            // Create chart
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
            // start and end angle must be set both for chart and series
            var chart99 = root99.container.children.push(
                am5percent.PieChart.new(root99, {
                    width: am5.percent(110),
                    height: am5.percent(100),
                    x: am5.percent(-5),
                    layout: root99.verticalLayout
                })
            );



            chart99.events.on("click", (event) => {
                var activeRoot = "";
                var rootArray = [];

                count1 = 0;
                count2 = 0;                
                count4 = 0;
                count5 = 0;
                count6 = 0;

                if (count3 == 0) {
                    count3 = 1
                    document.getElementById("title").innerHTML = "High Tunnels System"


                    var xx = document.getElementById("chartdiv");
                    if (xx.style.display === "block") {
                        xx.style.display = "none";
                    }

                    var yy = document.getElementById("chartdiv2");//
                    if (yy.style.display === "block") {
                        yy.style.display = "none";
                    }


                    var a = document.getElementById("labeltablelip");
                    if (a.style.display === "block") {
                        a.style.display = "none";
                    }

                    var aa = document.getElementById("labeltablehts");
                    if (aa.style.display === "none") {
                        aa.style.display = "block";
                    }

                    var b = document.getElementById("labeltablebsf");//
                    if (b.style.display === "block") {
                        b.style.display = "none";
                    }

                    var b1 = document.getElementById("labeltablecbt");
                    if (b1.style.display === "block") {
                        b1.style.display = "none";
                    }

                    var tI = document.getElementById("totaltableI");//
                    if (tI.style.display === "block") {
                        tI.style.display = "none";
                    }
                    var allI = document.getElementById("IntertableI");
                    if (allI.style.display === "block") {
                        allI.style.display = "none";
                    }
                    var xI = document.getElementById("liptableI");
                    if (xI.style.display === "block") {
                        xI.style.display = "none";
                    }

                    var yI = document.getElementById("bsftableI");//
                    if (yI.style.display === "block") {
                        yI.style.display = "none";
                    }

                    var y1I = document.getElementById("cbttableI");
                    if (y1I.style.display === "block") {
                        y1I.style.display = "none";
                    }
                    var y2I = document.getElementById("htstableI");
                    if (y2I.style.display === "none") {
                        y2I.style.display = "block";
                    }
                    var y3I = document.getElementById("edptableI");
                    if (y3I.style.display === "block") {
                        y3I.style.display = "none";
                    }
                    var y4I = document.getElementById("tvttableI");
                    if (y4I.style.display === "block") {
                        y4I.style.display = "none";
                    }

                    var t = document.getElementById("totaltable");
                    if (t.style.display === "block") {
                        t.style.display = "none";
                    }

                    var htsF = document.getElementById("htsFulltable");
                    if (htsF.style.display === "none") {
                        htsF.style.display = "block";
                    }

                    var x = document.getElementById("liptable");
                    if (x.style.display === "block") {
                        x.style.display = "none";
                    }
                    var lipbifurtitle = document.getElementById("lipbifurtitle");
                    if (lipbifurtitle.style.display === "block") {
                        lipbifurtitle.style.display = "none";
                    }

                    var lipbifurtable = document.getElementById("lipbifurtable");
                    if (lipbifurtable.style.display === "block") {
                        lipbifurtable.style.display = "none";
                    }
                    var lipbifurtable2 = document.getElementById("lipbifurtable2");
                    if (lipbifurtable2.style.display === "block") {
                        lipbifurtable2.style.display = "none";
                    }

                    var y = document.getElementById("bsftable");//
                    if (y.style.display === "block") {
                        y.style.display = "none";
                    }

                    var htitle = document.getElementById("htstitle");
                    if (htitle.style.display === "none") {
                        htitle.style.display = "block";
                    }

                    var hts = document.getElementById("htstable");
                    if (hts.style.display === "none") {
                        hts.style.display = "block";
                    }

                    var y1 = document.getElementById("cbttable");
                    if (y1.style.display === "block") {
                        y1.style.display = "none";
                    }

                    var y2 = document.getElementById("cicigtitle");
                    if (y2.style.display === "block") {
                        y2.style.display = "none";
                    }
                                        var y3 = document.getElementById("cicigtable");
                if (y3.style.display === "block") {
                    y3.style.display = "none";
                }
                    var y4 = document.getElementById("edptable");
                    if (y4.style.display === "block") {
                        y4.style.display = "none";
                    }
                    var y5 = document.getElementById("chartdivedp");
                    if (y5.style.display === "block") {
                        y5.style.display = "none";
                    }
                    var y6 = document.getElementById("tvttable");
                    if (y6.style.display === "block") {
                        y6.style.display = "none";
                    }

                    var z1 = document.getElementById("chartdivbsf1");//
                    if (z1.style.display === "block") {
                        z1.style.display = "none";
                    }
                    var z4 = document.getElementById("chartdivbsfline");
                    if (z4.style.display === "block") {
                        z4.style.display = "none";
                    }
                    var htschart = document.getElementById("chartdivhts");
                    if (htschart.style.display === "none") {
                        htschart.style.display = "block";
                    }
                    var z2 = document.getElementById("chartdivbsf2");//
                    if (z2.style.display === "block") {
                        z2.style.display = "none";
                    }
                    var z3 = document.getElementById("chartdivtvt1");
                    if (z3.style.display === "block") {
                        z3.style.display = "none";
                    }
                    var z4 = document.getElementById("chartdivtvt2");
                    if (z4.style.display === "block") {
                        z4.style.display = "none";
                    }


                    var zz3 = document.getElementById("cbtChartDiv2");
                    if (zz3.style.display === "block") {
                        zz3.style.display = "none";
                    }




                    console.log("Clicked", event.target._root.dom.id)

                    console.log(`
                                seriesList: ${seriesList}
                            `)

                    //First Chart
                    seriesList[0].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[1].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })

                    //Second Chart
                    seriesList[3].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[4].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })                    

                    //Third Chart
                    seriesList[6].slices.template.setAll({
                        fill: am5.color(0x87ad20),
                        stroke: am5.color(0x87ad20)
                    })
                    seriesList[7].slices.template.setAll({
                        fill: am5.color(0x87ad20),
                        stroke: am5.color(0x87ad20)
                    })

                    seriesList[6].animate({
                        key: "startAngle",
                        to: 180,
                        loops: 1,
                        duration: 2000,
                        easing: am5.ease.yoyo(am5.ease.cubic)
                    });
                    seriesList[7].animate({
                        key: "startAngle",
                        to: 180,
                        loops: 1,
                        duration: 2000,
                        easing: am5.ease.yoyo(am5.ease.cubic)
                    });

                    //Fourth Chart
                    seriesList[9].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[10].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })

                    //Fifth Chart
                    seriesList[12].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[13].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })

                    //Sixth Chart
                    seriesList[15].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[16].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })




                    var BSFBarData = [
    @{
        foreach (var m in bsfList)
        {
                                    <text>{
                                                            'category': '@m.District',
                                                            'government': @m.Government,
                                                            'private': @m.Private
                                                                                             },
                                    </text>
        }
    }
                            ];

                    var BSFGov2 = [
    @{
        foreach (var m in bsfGov2)
        {
                                    <text>{
                                                            'category': '@m.District',
                                                            'livestock': @m.LiveStock,
                                                            'forest': @m.Forest
                                                                                                         },
                                    </text>
        }
    }
                                ];

                    var HtsData = [
    @{
        foreach (var m in htsList)
        {
                                    <text>
                                                        {
                                                            'sector': '@m.District',
                                                            'male': @m.Male,
                                                            'female': @m.Female
                                                    },
                                    </text>
        }
    }
                            ]
                    
                    var databsf2 = [{
                        "sector": "Forest",
                        "male": 0,
                        "female": 0

                    }, {
                        "sector": "Mines",
                        "male": 0,
                        "female": 0
                    },
                    {
                        "sector": "Industry",
                        "male": 0,
                        "female": 0
                    },
                    {
                        "sector": "Tourism",
                        "male": 0,
                        "forest": 0
                    },
                    {
                        "sector": "Agriculture",
                        "male": 0,
                        "forest": 0
                    }, {
                        "sector": "Livestock",
                        "male": 0,
                        "female": 0
                    }]


                    //if(count2 == 0){

                    if (root6) {
                        root6.dispose()
                    }
                    if (root11) {
                        root11.dispose()
                    }
                    if (root12) {
                        root12.dispose()
                    }
                    if (root13) {
                        root13.dispose()
                    } if (root17) {
                        root17.dispose()
                    }
                    renderBSF(BSFBarData)
                    renderbsf1(BSFGov2)
                    renderbsf2(databsf2)
                    renderhts(HtsData)
                }
            });

            // Create series
            var series3 = chart99.series.push(
                am5percent.PieSeries.new(root99, {
                    valueField: "value",
                    categoryField: "category",
                    //alignLabels: true,
                    cursorOverStyle: "pointer",
                    //alignLabels: true,
                    radius: am5.percent(70),
                    fill: am5.color(0x000000)
                    //radius: am5.percent(100),
                    //innerRadius: am5.percent(50)
                })
            );


            series3.data.setAll([
                {
                    category: "HTS",
                    value: @perBSF
                    }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })

            series3.labels.template.setAll({
                text: "HTS",
                fontSize: s3LabelSizeMax,
                opacity: 1,
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                inside: false,
                //centerX: am5.percent(250),
                centerY: am5.percent(s3LabelCenterYMax),
                //x: am5.percent(90),
                radius: s3Radius,
                fill: am5.color(0x000000)
            });

            // Disabling labels and ticks
            //series.labels.template.set("visible", false);
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");
            series3.set(
                "tooltip",
                am5.Tooltip.new(root99, {
                    forceHidden: true,
                })
            );

            // Create series
            // https://www.amchart99s.com/docs/v5/chart99s/percent-chart99s/pie-chart99/#Series
            // start and end angle must be set both for chart99 and series
            var series0 = chart99.series.push(
                am5percent.PieSeries.new(root99, {
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: true,
                    radius: am5.percent(100),
                    innerRadius: am5.percent(50)
                })
            );

            series0.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series0.slices.template.setAll({
                fillOpacity: 0.5,
                strokeOpacity: 0,
                templateField: "settings"
            });

            series0.slices.template.states.create("hover", { scale: 1 });
            series0.slices.template.states.create("active", { shiftRadius: 0 });

            series0.labels.template.setAll({
                templateField: "settings"
            });

            series0.ticks.template.setAll({
                //templateField: "settings"
                forceHidden: true
            });

            //series0.labels.template.setAll({
            //    textType: "circular",
            //    radius: 30,

            //});
            series0.labels.template.setAll({
                fontSize: s0LabelSizeMax,
                forceHidden: true
            });


            // Set data
            // https://www.amchart99s.com/docs/v5/chart99s/percent-chart99s/pie-chart99/#Setting_data
            series0.data.setAll([
                {
                    category: "Done",
                    value: 100 
                    },
                {
                    category: "Unused",
                    value: 0,
                    settings: { forceHidden: true }
                }
            ]);

            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Create series
            // https://www.amchart99s.com/docs/v5/chart99s/percent-chart99s/pie-chart99/#Series
            // start and end angle must be set both for chart99 and series
            var series1 = chart99.series.push(
                am5percent.PieSeries.new(root99, {
                    radius: am5.percent(65),
                    innerRadius: am5.percent(85),
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: false
                })
            );

            series1.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series1.slices.template.setAll({
                templateField: "sliceSettings",
                strokeOpacity: 0
            });

            series1.labels.template.setAll({
                fontSize: s1LabelSizeMax,
                textType: "circular"
            });

            series1.labels.template.adapters.add("radius", function (radius, target) {
                var dataItem = target.dataItem;
                var slice = dataItem.get("slice");
                return -(slice.get("radius") - slice.get("innerRadius")) / sLabelPosition;
            });

            series1.slices.template.states.create("hover", { scale: 1 });
            series1.slices.template.states.create("active", { shiftRadius: 0 });

            series1.ticks.template.setAll({
                forceHidden: true
            });


            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Set data
            // https://www.amchart99s.com/docs/v5/chart99s/percent-chart99s/pie-chart99/#Setting_data
            series1.data.setAll([{
                category: "Done",
                value: 100
                },
            //{
            //    category: "Second",
            //    value: 30
            //},
            {
                category: "Remaining",
                value: 0,
                sliceSettings: { fill: am5.color(0xdedede) }
            }]);

            //series1.animate({
            //    key: "startAngle",
            //    to: 180,
            //    loops: Infinity,
            //    duration: 2000,
            //    easing: am5.ease.yoyo(am5.ease.cubic)
            //});

            seriesList.push(series0);
            seriesList.push(series1);
            seriesList.push(series3);


        }); // end am5.ready()

    }
</script>


<!-- Chart code -->
<script>

        var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                activateRoot3()
            }
        };
    })();
    initializeData()

    function activateRoot3() {
        
    am5.ready(function () {

        // Create root99 element
        // https://www.amchart99s.com/docs/v5/getting-started/#Root_element
        var root3 = am5.Root.new("chartdivPerCBT");

        // Set themes
        // https://www.amcharts.com/docs/v5/concepts/themes/
        root3.setThemes([
            am5themes_Animated.new(root3)
        ]);

        // Create chart
        // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
        // start and end angle must be set both for chart and series
        var chart3 = root3.container.children.push(
            am5percent.PieChart.new(root3, {
                width: am5.percent(110),
                height: am5.percent(100),
                x: am5.percent(-5),
                layout: root3.verticalLayout
            })
        );


            chart3.events.on("click", (event) => {
                var activeRoot = "";
                var rootArray = [];

                count1 = 0;
                count2 = 0;
                count3 = 0;
                count5 = 0;
                count6 = 0;

                if (count4 == 0) {
                    count4 = 1

                document.getElementById("title").innerHTML = "CI/CIGs Formed"

                    var tI = document.getElementById("totaltableI");
                    if (tI.style.display === "block") {
                        tI.style.display = "none";
                    }
                    var allI = document.getElementById("IntertableI");
                    if (allI.style.display === "block") {
                        allI.style.display = "none";
                    }
                    var xI = document.getElementById("liptableI");
                    if (xI.style.display === "block") {
                        xI.style.display = "none";
                    }

                    var yI = document.getElementById("bsftableI");
                    if (yI.style.display === "block") {
                        yI.style.display = "none";
                    }

                    var y1I = document.getElementById("cbttableI");
                    if (y1I.style.display === "none") {
                        y1I.style.display = "block";
                    }
                    var y2I = document.getElementById("htstableI");
                    if (y2I.style.display === "block") {
                        y2I.style.display = "none";
                    }
                    var y3I = document.getElementById("edptableI");
                    if (y3I.style.display === "block") {
                        y3I.style.display = "none";
                    }
                    var y4I = document.getElementById("tvttableI");
                    if (y4I.style.display === "block") {
                        y4I.style.display = "none";
                    }

                var x = document.getElementById("cbttable");
                if (x.style.display === "none") {
                    x.style.display = "block";
                }
                    var y2 = document.getElementById("cicigtitle");
                    if (y2.style.display === "none") {
                        y2.style.display = "block";
                    }
                    var y3 = document.getElementById("cicigtable");
                    if (y3.style.display === "none") {
                        y3.style.display = "block";
                    }
                    var y4 = document.getElementById("edptable");
                    if (y4.style.display === "block") {
                        y4.style.display = "none";
                    }
                    var y5 = document.getElementById("chartdivedp");
                    if (y5.style.display === "block") {
                        y5.style.display = "none";
                    }
                    var y6 = document.getElementById("tvttable");
                    if (y6.style.display === "block") {
                        y6.style.display = "none";
                    }

                var y = document.getElementById("bsftable");
                if (y.style.display === "block") {
                    y.style.display = "none";
                }
                var htitle = document.getElementById("htstitle");
                if (htitle.style.display === "block") {                 
                    htitle.style.display = "none";
                }
                var htstable = document.getElementById("htstable");
                if (htstable.style.display === "block") {
                    htstable.style.display = "none";
                }
                var htschart = document.getElementById("chartdivhts");
                if (htschart.style.display === "block") {
                    htschart.style.display = "none";
                }                  

                    var t = document.getElementById("totaltable");
                if (t.style.display === "block") {
                    t.style.display = "none";
                }

                    var htsF = document.getElementById("htsFulltable");
                    if (htsF.style.display === "block") {
                        htsF.style.display = "none";
                    }

                var y1 = document.getElementById("liptable");
                if (y1.style.display === "block") {
                    y1.style.display = "none";
                }
                    var lipbifurtitle = document.getElementById("lipbifurtitle");
                    if (lipbifurtitle.style.display === "block") {
                        lipbifurtitle.style.display = "none";
                    }

                    var lipbifurtable = document.getElementById("lipbifurtable");
                    if (lipbifurtable.style.display === "block") {
                        lipbifurtable.style.display = "none";
                    }
                    var lipbifurtable2 = document.getElementById("lipbifurtable2");
                    if (lipbifurtable2.style.display === "block") {
                        lipbifurtable2.style.display = "none";
                    }

                var a = document.getElementById("labeltablelip");
                if (a.style.display === "block") {
                    a.style.display = "none";
                }
                    var aa = document.getElementById("labeltablehts");
                    if (aa.style.display === "block") {
                        aa.style.display = "none";
                    }
                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "block") {
                    b.style.display = "none";
                }

                var c = document.getElementById("labeltablecbt");
                if (c.style.display === "none") {
                    c.style.display = "block";
                }


                var xx = document.getElementById("chartdiv");
                if (xx.style.display === "none") {
                    xx.style.display = "block";
                }

                var yy = document.getElementById("chartdiv2");
                if (yy.style.display === "block") {
                    yy.style.display = "none";
                }

                var z1 = document.getElementById("chartdivbsf1");
                if (z1.style.display === "block") {
                    z1.style.display = "none";
                }
                    var z4 = document.getElementById("chartdivbsfline");
                    if (z4.style.display === "block") {
                        z4.style.display = "none";
                    }
                                    var htschart = document.getElementById("chartdivhts");
                    if (htschart.style.display === "block") {
                        htschart.style.display = "none";
                    }

                var z2 = document.getElementById("chartdivbsf2");
                if (z2.style.display === "block") {
                    z2.style.display = "none";
                }
                var z3 = document.getElementById("chartdivtvt1");
                if (z3.style.display === "block") {
                    z3.style.display = "none";
                }
                var z4 = document.getElementById("chartdivtvt2");
                if (z4.style.display === "block") {
                    z4.style.display = "none";
                }

                var zz3 = document.getElementById("cbtChartDiv2");
                if (zz3.style.display === "none") {
                    zz3.style.display = "block";
                }

                if (root6) {
                    root6.dispose()
                }
                if (root11) {
                    root11.dispose()
                }



                console.log("Clicked", event.target._root.dom.id)

                count1 = 0;
                count2 = 0;

                console.log(`
                            count1: ${count1}
                            count2:  ${count2}
                            count3:  ${count3}
                        `)

                //First Chart
                seriesList[0].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[1].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Second Chart
                seriesList[3].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[4].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Third Chart
                seriesList[6].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[7].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

              
                //Fourth Chart
                seriesList[9].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })
                seriesList[10].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })

                    seriesList[9].animate({
                        key: "startAngle",
                        to: 180,
                        loops: 1,
                        duration: 2000,
                        easing: am5.ease.yoyo(am5.ease.cubic)
                    });
                    seriesList[10].animate({
                        key: "startAngle",
                        to: 180,
                        loops: 1,
                        duration: 2000,
                        easing: am5.ease.yoyo(am5.ease.cubic)
                    });

                //Fifth Chart
                seriesList[12].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[13].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                                //Sixth Chart
                seriesList[15].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[16].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                var CICIGBarData = [
    @{
        foreach (var m in cicigList)
        {
                                    <text>{
                                                        'category': '@m.District',
                                                        'male': @m.CIMaleCount,
                                                        'female': @m.CIFemaleCount,
                                                        'refugeemale': @m.CIGMaleCount,
                                                        'refugeefemale': @m.CIGFemaleCount,
                                                        'total': @m.TotalCount
                                                                                 },
                                    </text>
        }
    }
                        ];

                var CICIGBenfBarData = [
    @{
        foreach (var m in cicigBenf)
        {
                                    <text>{
                                                        'category': '@m.District',
                                                        'male': @m.CIMaleCount,
                                                        'female': @m.CIFemaleCount,
                                                        'refugeemale': @m.CIGMaleCount,
                                                        'refugeefemale': @m.CIGFemaleCount,
                                                        'total': @m.TotalCount
                                                                                 },
                                    </text>
        }
    }
                        ];
                
                if(root6){
                    root6.dispose();
                }
                if(root14){
                    root14.dispose();
                }
                rerender(CICIGBarData, 0, "cbt") //root6 activated
                rerendercbt(CICIGBenfBarData)
                }
            });


            // Create series
            var series3 = chart3.series.push(
                am5percent.PieSeries.new(root3, {
                    valueField: "value",
                    categoryField: "category",
                    //alignLabels: true,
                    cursorOverStyle: "pointer",
                    //alignLabels: true,
                    radius: am5.percent(70),
                    //radius: am5.percent(100),
                    //innerRadius: am5.percent(50)
                })
            );

            series3.data.setAll([
                {
                    category: "CI/CIGs",
                    value: @perCICIG
                }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })

            series3.labels.template.setAll({
                text: "CI/CIGs",
                fontSize: s3LabelSizeMax,
                opacity: 1,
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                inside: false,
                //centerX: am5.percent(250),
                centerY: am5.percent(s3LabelCenterYMax),
                //x: am5.percent(90),
                radius: s3CIRadius,
                fill: am5.color(0x000000)
            });

            // Disabling labels and ticks
            //series.labels.template.set("visible", false);
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");
            series3.set(
                "tooltip",
                am5.Tooltip.new(root3, {
                    forceHidden: true,
                })
            );

        // Create series
        // https://www.amchart3s.com/docs/v5/chart3s/percent-chart3s/pie-chart3/#Series
        // start and end angle must be set both for chart3 and series
        var series0 = chart3.series.push(
            am5percent.PieSeries.new(root3, {
                valueField: "value",
                categoryField: "category",
                alignLabels: true,
                radius: am5.percent(100),
                innerRadius: am5.percent(50)
            })
        );

        series0.states.create("hidden", {
            startAngle: 180,
            endAngle: 180
        });

        series0.slices.template.setAll({
            fillOpacity: 0.5,
            strokeOpacity: 0,
            templateField: "settings"
        });

        series0.slices.template.states.create("hover", { scale: 1 });
        series0.slices.template.states.create("active", { shiftRadius: 0 });

        series0.labels.template.setAll({
            fontSize: s0LabelSizeMax,
            templateField: "settings"
        });

        series0.ticks.template.setAll({
            //templateField: "settings"
            forceHidden: true
        });

        //series0.labels.template.setAll({
        //    textType: "circular",
        //    radius: 30,

        //});
            series0.labels.template.setAll({
                forceHidden: true
            });


        // Set data
        // https://www.amchart3s.com/docs/v5/chart3s/percent-chart3s/pie-chart3/#Setting_data
        series0.data.setAll([
            {
                category: "Done",
                value: @perCICIG
            },
            {
                category: "Unused",
                value: 100 - @perCICIG,
                settings: { forceHidden: true }
            }
        ]);


            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });


        // Create series
        // https://www.amchart3s.com/docs/v5/chart3s/percent-chart3s/pie-chart3/#Series
        // start and end angle must be set both for chart3 and series
        var series1 = chart3.series.push(
            am5percent.PieSeries.new(root3, {
                radius: am5.percent(65),
                innerRadius: am5.percent(85),
                valueField: "value",
                categoryField: "category",
                alignLabels: false
            })
        );

        series1.states.create("hidden", {
            startAngle: 180,
            endAngle: 180
        });

        series1.slices.template.setAll({
            templateField: "sliceSettings",
            strokeOpacity: 0
        });

        series1.labels.template.setAll({
            fontSize: s1LabelSizeMax,
            textType: "circular"
        });

        series1.labels.template.adapters.add("radius", function (radius, target) {
            var dataItem = target.dataItem;
            var slice = dataItem.get("slice");
            return -(slice.get("radius") - slice.get("innerRadius")) / sLabelPosition;
        });

        series1.slices.template.states.create("hover", { scale: 1 });
        series1.slices.template.states.create("active", { shiftRadius: 0 });

        series1.ticks.template.setAll({
            forceHidden: true
        });

            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

        // Set data
        // https://www.amchart3s.com/docs/v5/chart3s/percent-chart3s/pie-chart3/#Setting_data
        series1.data.setAll([{
            category: "Done",
            value: @perCICIG
        },
        //{
        //    category: "Second",
        //    value: 30
        //},
        {
            category: "Remaining",
            value: 100 - @perCICIG,
            sliceSettings: { fill: am5.color(0xdedede) }
        }]);

        seriesList.push(series0);
        seriesList.push(series1);
        seriesList.push(series3);

    }); // end am5.ready()
}

</script>

<!-- Chart code -->
<script>
    var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                activateRoot5()
            }
        };
    })();
    initializeData()

    function activateRoot5() {
        am5.ready(function () {

            // Create root4 element
            // https://www.amchart4s.com/docs/v5/getting-started/#Root_element
            var root5 = am5.Root.new("chartdivPerEBP2");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root5.setThemes([
                am5themes_Animated.new(root5)
            ]);

            // Create chart
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
            // start and end angle must be set both for chart and series
            var chart5 = root5.container.children.push(
                am5percent.PieChart.new(root5, {
                    width: am5.percent(110),
                    height: am5.percent(100),
                    x: am5.percent(-5),
                    layout: root5.verticalLayout
                })
            );

            chart5.events.on("click", (event) => {
                var activeRoot = "";
                var rootArray = [];

                console.log("Clicked>>>", event.target._root.dom.id)

                count1 = 0;
                count2 = 0;
                count3 = 0;
                count4 = 0;
                count6 = 0;

                if (count5 == 0) {
                    count5 = 1


                document.getElementById("title").innerHTML = "Technical And Vocational Trainings"

                    var tI = document.getElementById("totaltableI");
                    if (tI.style.display === "block") {
                        tI.style.display = "none";
                    }
                    var allI = document.getElementById("IntertableI");
                    if (allI.style.display === "block") {
                        allI.style.display = "none";
                    }
                    var xI = document.getElementById("liptableI");
                    if (xI.style.display === "block") {
                        xI.style.display = "none";
                    }

                    var yI = document.getElementById("bsftableI");
                    if (yI.style.display === "block") {
                        yI.style.display = "none";
                    }

                    var y1I = document.getElementById("cbttableI");
                    if (y1I.style.display === "block") {
                        y1I.style.display = "none";
                    }
                                    var y2I = document.getElementById("htstableI");
                if (y2I.style.display === "block") {
                    y2I.style.display = "none";
                }
                    var y3I = document.getElementById("edptableI");
                    if (y3I.style.display === "block") {
                        y3I.style.display = "none";
                    }
                    var y4I = document.getElementById("tvttableI");
                    if (y4I.style.display === "none") {
                        y4I.style.display = "block";
                    }

                var t = document.getElementById("totaltable");
                if (t.style.display === "block") {
                    t.style.display = "none";
                }

                    var htsF = document.getElementById("htsFulltable");
                    if (htsF.style.display === "block") {
                        htsF.style.display = "none";
                    }

                var x = document.getElementById("liptable");
                if (x.style.display === "block") {
                    x.style.display = "none";
                }
                    var lipbifurtitle = document.getElementById("lipbifurtitle");
                    if (lipbifurtitle.style.display === "block") {
                        lipbifurtitle.style.display = "none";
                    }

                    var lipbifurtable = document.getElementById("lipbifurtable");
                    if (lipbifurtable.style.display === "block") {
                        lipbifurtable.style.display = "none";
                    }
                                    var lipbifurtable2 = document.getElementById("lipbifurtable2");
                if (lipbifurtable2.style.display === "block") {
                    lipbifurtable2.style.display = "none";
                }

                var y = document.getElementById("bsftable");
                if (y.style.display === "block") {
                    y.style.display = "none";
                }

                var htitle = document.getElementById("htstitle");
                if(htitle.style.display === "block"){                     
                    htitle.style.display = "none";
                }
                var hts = document.getElementById("htstable");
                if (hts.style.display === "block") {
                    hts.style.display = "none";
                }

                var y1 = document.getElementById("cbttable");
                if (y1.style.display === "block") {
                    y1.style.display = "none";
                }
                    var y2 = document.getElementById("cicigtitle");
                    if (y2.style.display === "block") {
                        y2.style.display = "none";
                    }
                    var y3 = document.getElementById("cicigtable");
                    if (y3.style.display === "block") {
                        y3.style.display = "none";
                    }
                    var y4 = document.getElementById("edptable");
                    if (y4.style.display === "block") {
                        y4.style.display = "none";
                    }
                    var y5 = document.getElementById("chartdivedp");
                    if (y5.style.display === "block") {
                        y5.style.display = "none";
                    }
                    var y6 = document.getElementById("tvttable");
                    if (y6.style.display === "none") {
                        y6.style.display = "block";
                    }

                var a = document.getElementById("labeltablelip");
                if (a.style.display === "none") {
                    a.style.display = "block";
                }
                    var aa = document.getElementById("labeltablehts");
                    if (aa.style.display === "block") {
                        aa.style.display = "none";
                    }

                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "block") {
                    b.style.display = "none";
                }
                var c = document.getElementById("labeltablecbt");
                if (c.style.display === "block") {
                    c.style.display = "none";
                }

                var xx = document.getElementById("chartdiv");
                if (xx.style.display === "none") {
                    xx.style.display = "block";
                }

                var yy = document.getElementById("chartdiv2");
                if (yy.style.display === "block") {
                    yy.style.display = "none";
                }

                var z1 = document.getElementById("chartdivbsf1");
                if (z1.style.display === "block") {
                    z1.style.display = "none";
                }
                    var z4 = document.getElementById("chartdivbsfline");
                    if (z4.style.display === "block") {
                        z4.style.display = "none";
                    }
                    var htschart = document.getElementById("chartdivhts");
                    if (htschart.style.display === "block") {
                        htschart.style.display = "none";
                    }

                var z2 = document.getElementById("chartdivbsf2");
                if (z2.style.display === "block") {
                    z2.style.display = "none";
                }
                var z3 = document.getElementById("chartdivtvt1");
                if (z3.style.display === "none") {
                    z3.style.display = "block";
                }
                var z4 = document.getElementById("chartdivtvt2");
                if (z4.style.display === "none") {
                    z4.style.display = "block";
                }

                var zz3 = document.getElementById("cbtChartDiv2");
                if (zz3.style.display === "block") {
                    zz3.style.display = "none";
                }

                if (root6) {
                    root6.dispose()
                }
                if (root11) {
                    root11.dispose()
                }
                if(root15){
                    root15.dispose()
                }
                if(root16){
                    root16.dispose()
                }


                count1 = 0;
                count2 = 0;

                console.log(`
                                        count1: ${count1}
                                        count2:  ${count2}
                                        count3:  ${count3}
                                    `)

                //First Chart
                seriesList[0].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[1].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Second Chart
                seriesList[3].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[4].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Third Chart
                seriesList[6].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[7].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fourth Chart
                seriesList[9].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[10].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fifth Chart
                seriesList[12].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })
                seriesList[13].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })
                seriesList[12].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });
                seriesList[13].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });

                    //Sixth Chart
                    seriesList[15].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })
                    seriesList[16].slices.template.setAll({
                        fill: am5.color(0x67B7DC),
                        stroke: am5.color(0x67B7DC)
                    })



                    var data = [{
                        "category": "Killa Abdullah",
                        "male": 0,
                        "female": 0,
                        "refugeemale": 248,
                        "refugeefemale": 62,
                        "total": 310


                    }, {
                        "category": "Killa Saifullah",
                        "male": 0,
                        "female": 0,
                        "refugeemale": 248,
                        "refugeefemale": 124,
                        "total": 372

                    }, {
                        "category": "Sherani",
                        "male": 0,
                        "female": 0,
                        "refugeemale": 0,
                        "refugeefemale": 0,
                        "total": 0

                    }, {
                        "category": "Chagai",
                        "male": 0,
                        "female": 0,
                        "refugeemale": 504,
                        "refugeefemale": 64,
                        "total": 568

                    },
                    {
                        "category": "Nushki",
                        "male": 0,
                        "female": 0,
                        "refugeemale": 248,
                        "refugeefemale": 62,
                        "total": 310

                    },
                    {
                        "category": "Pishin",
                        "male": 0,
                        "female": 0,
                        "refugeemale": 248,
                        "refugeefemale": 62,
                        "total": 310

                    },
                    {
                        "category": "Zhob",
                        "male": 0,
                        "female": 0,
                        "refugeemale": 248,
                        "refugeefemale": 62,
                        "total": 310

                    },
                    {
                        "category": "Mastung",
                        "male": 0,
                        "female": 0,
                        "refugeemale": 256,
                        "refugeefemale": 64,
                        "total": 320

                    }]
                    var datatvt1 = [{
                        "category": "Mobile Repairing",
                        "male": 500,
                        "female": 0

                    }, {
                        "category": "Motor Bike Engine Tuning",
                        "male": 500,
                        "female": 0
                    },
                    {
                        "category": "Motor Winding",
                        "male": 250,
                        "female": 0
                    },
                    {
                        "category": "Solar Panel",
                        "male": 250,
                        "female": 0
                    },
                    {
                        "category": "Tailring (Female)",
                        "male": 0,
                        "female": 500
                    },
                    {
                        "category": "Tailring (Male)",
                        "male": 500,
                        "female": 0
                    }]
                    var datatvt2 = [{
                        "category": "Mobile Repairing",
                        "male": 0,
                        "female": 0

                    }, {
                        "category": "Motor Bike Engine Tuning",
                        "male": 0,
                        "female": 0
                    },
                    {
                        "category": "Motor Winding",
                        "male": 0,
                        "female": 0
                    },
                    {
                        "category": "Solar Panel",
                        "male": 0,
                        "female": 0
                    },
                    {
                        "category": "Tailring (Female)",
                        "male": 0,
                        "female": 0
                    },
                    {
                        "category": "Tailring (Male)",
                        "male": 0,
                        "female": 0
                    }]

                rendertvt1(datatvt1)
                rendertvt2(datatvt2)               
                rerender(data, 0, "tvt") //root6 activated        
                }
            });


            // Create series
            var series3 = chart5.series.push(
                am5percent.PieSeries.new(root5, {
                    valueField: "value",
                    categoryField: "category",
                    //alignLabels: true,
                    cursorOverStyle: "pointer",
                    //alignLabels: true,
                    radius: am5.percent(70),
                    //radius: am5.percent(100),
                    //innerRadius: am5.percent(50)
                })
            );


            series3.data.setAll([
                {
                    category: "TVT",
                    value: 19
                }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })

            series3.labels.template.setAll({
                text: "TVT",
                fontSize: s3LabelSizeMax,
                opacity: 1,
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                inside: false,
                //centerX: am5.percent(250),
                centerY: am5.percent(s3LabelCenterYMax),
                //x: am5.percent(90),
                radius: s3Radius,
                fill: am5.color(0x000000)
            });

            // Disabling labels and ticks
            //series.labels.template.set("visible", false);
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");
            series3.set(
                "tooltip",
                am5.Tooltip.new(root5, {
                    forceHidden: true,
                })
            );

            // Create series
            // https://www.amchart5s.com/docs/v5/chart5s/percent-chart5s/pie-chart5/#Series
            // start and end angle must be set both for chart5 and series
            var series0 = chart5.series.push(
                am5percent.PieSeries.new(root5, {
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: true,
                    radius: am5.percent(100),
                    innerRadius: am5.percent(50)
                })
            );

            series0.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series0.slices.template.setAll({
                fillOpacity: 0.5,
                strokeOpacity: 0,
                templateField: "settings"
            });

            series0.slices.template.states.create("hover", { scale: 1 });
            series0.slices.template.states.create("active", { shiftRadius: 0 });

            series0.labels.template.setAll({
                fontSize: s0LabelSizeMax,
                templateField: "settings"
            });

            series0.ticks.template.setAll({
                //templateField: "settings"
                forceHidden: true
            });

            //series0.labels.template.setAll({
            //    textType: "circular",
            //    radius: 30,

            //});
            series0.labels.template.setAll({
                fontSize: s0LabelSizeMax,
                forceHidden: true
            });


            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            //series0.bullets.push(function () {
            //    return am5.Bullet.new(root5, {
            //        sprite: am5.Label.new(root5, {
            //            //text: "LIPs",
            //            centerX: am5.percent(50),
            //            centerY: am5.percent(130),
            //            populateText: true,
            //            //fill: am5.color(0xffffff)
            //        })
            //    });
            //});




            // Set data
            // https://www.amchart5s.com/docs/v5/chart5s/percent-chart5s/pie-chart5/#Setting_data
            series0.data.setAll([
                {
                    category: "Done",
                    value: 19,
                    //settings: { fill: am5.color(0x540099) }
                },
                {
                    category: "Unused",
                    value: 81,
                    settings: { forceHidden: true }
                }
            ]);



            // Create series
            // https://www.amchart5s.com/docs/v5/chart5s/percent-chart5s/pie-chart5/#Series
            // start and end angle must be set both for chart5 and series
            var series1 = chart5.series.push(
                am5percent.PieSeries.new(root5, {
                    radius: am5.percent(65),
                    innerRadius: am5.percent(85),
                    valueField: "value",
                    categoryField: "category",
                    alignLabels: false
                })
            );

            series1.states.create("hidden", {
                startAngle: 180,
                endAngle: 180
            });

            series1.slices.template.setAll({
                templateField: "sliceSettings",
                strokeOpacity: 0
            });

            series1.labels.template.setAll({
                textType: "circular",
                fontSize: s1LabelSizeMax,
                fill: am5.color(0x000000),
            });

            series1.labels.template.adapters.add("radius", function (radius, target) {
                var dataItem = target.dataItem;
                var slice = dataItem.get("slice");
                return -(slice.get("radius") - slice.get("innerRadius")) / sLabelPosition;
            });

            series1.slices.template.states.create("hover", { scale: 1 });
            series1.slices.template.states.create("active", { shiftRadius: 0 });

            series1.ticks.template.setAll({
                forceHidden: true
            });


            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

            // Set data
            // https://www.amchart5s.com/docs/v5/chart5s/percent-chart5s/pie-chart5/#Setting_data
            series1.data.setAll([{
                category: "Done",
                value: 19,
                //sliceSettings: { fill: am5.color(0x540099) }
            },
            //{
            //    category: "Second",
            //    value: 30
            //},
            {
                category: "Remaining",
                value: 81,
                sliceSettings: { fill: am5.color(0xdedede) }
            }]);

            seriesList.push(series0);
            seriesList.push(series1);
            seriesList.push(series3);

        }); // end am5.ready()
    }
</script>

<!-- Chart code -->
<script>
    var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                activateRoot4()
            }
        };
    })();
    initializeData()

    function activateRoot4() {

    am5.ready(function () {

        // Create root3 element
        // https://www.amchart3s.com/docs/v5/getting-started/#Root_element
        var root4 = am5.Root.new("chartdivPerEBP");

        // Set themes
        // https://www.amcharts.com/docs/v5/concepts/themes/
        root4.setThemes([
            am5themes_Animated.new(root4)
        ]);

        // Create chart
        // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
        // start and end angle must be set both for chart and series
        var chart4 = root4.container.children.push(
            am5percent.PieChart.new(root4, {
                width: am5.percent(110),
                height: am5.percent(100),
                x: am5.percent(-5),
                layout: root4.verticalLayout
            })
        );


            chart4.events.on("click", (event) => {
                var activeRoot = "";
                var rootArray = [];

                count1 = 0;
                count2 = 0;
                count3 = 0;
                count4 = 0;
                count5 = 0;
                //count6 = 0;
                

                if (count6 == 0) {
                    count6 = 1

                document.getElementById("title").innerHTML = "Enterprise Business Plan"

                    var tI = document.getElementById("totaltableI");
                    if (tI.style.display === "block") {
                        tI.style.display = "none";
                    }
                    var allI = document.getElementById("IntertableI");
                    if (allI.style.display === "block") {
                        allI.style.display = "none";
                    }
                    var xI = document.getElementById("liptableI");
                    if (xI.style.display === "block") {
                        xI.style.display = "none";
                    }

                    var yI = document.getElementById("bsftableI");
                    if (yI.style.display === "block") {
                        yI.style.display = "none";
                    }

                    var y1I = document.getElementById("cbttableI");
                    if (y1I.style.display === "block") {
                        y1I.style.display = "none";
                    }
                    
                    var y2I = document.getElementById("htstableI");
                    if (y2I.style.display === "block") {
                        y2I.style.display = "none";
                    }
                    var y3I = document.getElementById("edptableI");
                    if (y3I.style.display === "none") {
                        y3I.style.display = "block";
                    }
                     var y4I = document.getElementById("tvttableI");
                    if (y4I.style.display === "block") {
                        y4I.style.display = "none";
                    }

                var t = document.getElementById("totaltable");
                if (t.style.display === "block") {
                    t.style.display = "none";
                }

                    var htsF = document.getElementById("htsFulltable");
                    if (htsF.style.display === "block") {
                        htsF.style.display = "none";
                    }

                var x = document.getElementById("liptable");
                if (x.style.display === "block") {
                    x.style.display = "none";
                }
                    var lipbifurtitle = document.getElementById("lipbifurtitle");
                    if (lipbifurtitle.style.display === "block") {
                        lipbifurtitle.style.display = "none";
                    }

                    var lipbifurtable = document.getElementById("lipbifurtable");
                    if (lipbifurtable.style.display === "block") {
                        lipbifurtable.style.display = "none";
                    }
                    var lipbifurtable2 = document.getElementById("lipbifurtable2");
                    if (lipbifurtable2.style.display === "block") {
                        lipbifurtable2.style.display = "none";
                    }

                var y = document.getElementById("bsftable");
                if (y.style.display === "block") {
                    y.style.display = "none";
                }

                    var htitle = document.getElementById("htstitle");
                    if (htitle.style.display === "block") {                   
                        htitle.style.display = "none";
                    }
                    var hts = document.getElementById("htstable");
                    if (hts.style.display === "block") {
                        hts.style.display = "none";
                    }


                var y1 = document.getElementById("cbttable");
                if (y1.style.display === "block") {
                    y1.style.display = "none";
                }
                    var y2 = document.getElementById("cicigtitle");
                    if (y2.style.display === "block") {
                        y2.style.display = "none";
                    }
                    var y3 = document.getElementById("cicigtable");
                    if (y3.style.display === "block") {
                        y3.style.display = "none";
                    }
                    var y4 = document.getElementById("edptable");
                    if (y4.style.display === "none") {
                        y4.style.display = "block";
                    }
                    var y5 = document.getElementById("chartdivedp");
                    if (y5.style.display === "none") {
                        y5.style.display = "block";
                    }
                    var y6 = document.getElementById("tvttable");
                    if (y6.style.display === "block") {
                        y6.style.display = "none";
                    }

                var a = document.getElementById("labeltablelip");
                if (a.style.display === "block") {
                    a.style.display = "none";
                }

                    var aa = document.getElementById("labeltablehts");
                    if (aa.style.display === "none") {
                        aa.style.display = "block";
                    }

                var b = document.getElementById("labeltablebsf");
                if (b.style.display === "block") {
                    b.style.display = "none";
                }
                var c = document.getElementById("labeltablecbt");
                if (c.style.display === "block") {
                    c.style.display = "none";
                }

                var xx = document.getElementById("chartdiv");
                if (xx.style.display === "block") {
                    xx.style.display = "none";
                }

                var yy = document.getElementById("chartdiv2");
                if (yy.style.display === "block") {
                    yy.style.display = "none";
                }

                var z1 = document.getElementById("chartdivbsf1");
                if (z1.style.display === "block") {
                    z1.style.display = "none";
                }
                    var z4 = document.getElementById("chartdivbsfline");
                    if (z4.style.display === "block") {
                        z4.style.display = "none";
                    }
                                    var htschart = document.getElementById("chartdivhts");
                    if (htschart.style.display === "block") {
                        htschart.style.display = "none";
                    }
                    var edpchart = document.getElementById("chartdivedp");
                    if (edpchart.style.display === "none") {
                        edpchart.style.display = "block";
                    }

                var z2 = document.getElementById("chartdivbsf2");
                if (z2.style.display === "block") {
                    z2.style.display = "none";
                }
                var z3 = document.getElementById("chartdivtvt1");
                if (z3.style.display === "block") {
                    z3.style.display = "none";
                }
                var z4 = document.getElementById("chartdivtvt2");
                if (z4.style.display === "block") {
                    z4.style.display = "none";
                }

                var zz3 = document.getElementById("cbtChartDiv2");
                if (zz3.style.display === "block") {
                    zz3.style.display = "none";
                }

                if (root6) {
                    root6.dispose()
                }
                if (root11) {
                    root11.dispose()
                }
                if(root117){
                    root117.dispose()
                }


                console.log("Clicked", event.target._root.dom.id)

                count1 = 0;
                count2 = 0;

                console.log(`
                                count1: ${count1}
                                count2:  ${count2}
                                count3:  ${count3}
                            `)

                //First Chart
                seriesList[0].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[1].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Second Chart
                seriesList[3].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[4].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Third Chart
                seriesList[6].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[7].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fourth Chart
                seriesList[9].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[10].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Fifth Chart
                seriesList[12].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })
                seriesList[13].slices.template.setAll({
                    fill: am5.color(0x67B7DC),
                    stroke: am5.color(0x67B7DC)
                })

                //Sixth Chart
                seriesList[15].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })
                seriesList[16].slices.template.setAll({
                    fill: am5.color(0x87ad20),
                    stroke: am5.color(0x87ad20)
                })

                seriesList[15].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });
                seriesList[16].animate({
                    key: "startAngle",
                    to: 180,
                    loops: 1,
                    duration: 2000,
                    easing: am5.ease.yoyo(am5.ease.cubic)
                });

               


                //if (count3 == 0) {
                var edpdata = [{
                        "district": "Killa Abdullah",
                        "male": 0,
                        "female": 0


                    }, {
                        "district": "Killa Saifullah",
                        "male": 0,
                        "female": 0

                    }, {
                        "district": "Sherani",
                        "male": 0,
                        "female":0

                    }, {
                        "district": "Chagai",
                        "male": 0,
                        "female": 0

                    },
                    {
                        "district": "Nushki",
                        "male": 0,
                        "female": 0

                    },
                    {
                        "district": "Pishin",
                        "male": 0,
                        "female": 0

                    },
                    {
                        "district": "Zhob",
                        "male": 0,
                        "female": 0

                    },
                    {
                        "district": "Mastung",
                        "male": 0,
                        "female": 0

                    }]
                
                //root6.dispose();
                //rerender(data, 0, "edp") //root6 activated
                renderedp(edpdata)
                }

            });


            // Create series
            var series3 = chart4.series.push(
                am5percent.PieSeries.new(root4, {
                    valueField: "value",
                    categoryField: "category",
                    //alignLabels: true,
                    cursorOverStyle: "pointer",
                    //alignLabels: true,
                    radius: am5.percent(70),
                    //radius: am5.percent(100),
                    //innerRadius: am5.percent(50)
                })
            );


            series3.data.setAll([
                {
                    category: "EDP",
                    value: 19
                }
            ]);

            // Configuring slices
            series3.slices.template.setAll({
                fill: am5.color(0xffffff),
                stroke: am5.color(0xffffff)
            })

            series3.labels.template.setAll({
                text: "EDP",
                fontSize: s3LabelSizeMax,
                opacity: 1,
                //textType: "circular",
                //textAlign: "center",
                //oversizedBehavior: "wrap",
                inside: false,
                //centerX: am5.percent(250),
                centerY: am5.percent(s3LabelCenterYMax),
                //x: am5.percent(90),
                radius: s3Radius,
                fill: am5.color(0x000000)
            });

            // Disabling labels and ticks
            //series.labels.template.set("visible", false);
            series3.ticks.template.set("visible", false);
            series3.slices.template.set("toggleKey", "none");
                        series3.set(
                "tooltip",
                am5.Tooltip.new(root4, {
                    forceHidden: true,
                })
            );

        // Create series
        // https://www.amchart4s.com/docs/v5/chart4s/percent-chart4s/pie-chart4/#Series
        // start and end angle must be set both for chart4 and series
        var series0 = chart4.series.push(
            am5percent.PieSeries.new(root4, {
                valueField: "value",
                categoryField: "category",
                alignLabels: true,
                radius: am5.percent(100),
                innerRadius: am5.percent(50)
            })
        );

        series0.states.create("hidden", {
            startAngle: 180,
            endAngle: 180
        });

        series0.slices.template.setAll({
            fillOpacity: 0.5,
            strokeOpacity: 0,
            templateField: "settings"
        });

        series0.slices.template.states.create("hover", { scale: 1 });
        series0.slices.template.states.create("active", { shiftRadius: 0 });

        series0.labels.template.setAll({
                fontSize: s0LabelSizeMax,
            templateField: "settings"
        });

        series0.ticks.template.setAll({
            //templateField: "settings"
            
            forceHidden: true
        });

        //series0.labels.template.setAll({
        //    textType: "circular",
        //    radius: 30,

        //});

            series0.labels.template.setAll({
                fontSize: s0LabelSizeMax,
                forceHidden: true
            });

        //series0.bullets.push(function () {
        //    return am5.Bullet.new(root4, {
        //        sprite: am5.Label.new(root4, {
        //            //text: "LIPs",
        //            centerX: am5.percent(50),
        //            centerY: am5.percent(130),
        //            populateText: true,
        //            //fill: am5.color(0xffffff)
        //        })
        //    });
        //});





        // Set data
        // https://www.amchart4s.com/docs/v5/chart4s/percent-chart4s/pie-chart4/#Setting_data
        series0.data.setAll([
            {
                category: "Done",
                value: 0
            },
            {
                category: "Unused",
                value: 100,
                settings: { forceHidden: true }
            }
        ]);

            series0.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

        // Create series
        // https://www.amchart4s.com/docs/v5/chart4s/percent-chart4s/pie-chart4/#Series
        // start and end angle must be set both for chart4 and series
        var series1 = chart4.series.push(
            am5percent.PieSeries.new(root4, {
                radius: am5.percent(65),
                innerRadius: am5.percent(85),
                valueField: "value",
                categoryField: "category",
                alignLabels: false
            })
        );

        series1.states.create("hidden", {
            startAngle: 180,
            endAngle: 180
        });

        series1.slices.template.setAll({
            templateField: "sliceSettings",
            strokeOpacity: 0
        });

        series1.labels.template.setAll({
            fontSize: s1LabelSizeMax,
            textType: "circular"
        });

        series1.labels.template.adapters.add("radius", function (radius, target) {
            var dataItem = target.dataItem;
            var slice = dataItem.get("slice");
            return -(slice.get("radius") - slice.get("innerRadius")) / sLabelPosition;
        });

        series1.slices.template.states.create("hover", { scale: 1 });
        series1.slices.template.states.create("active", { shiftRadius: 0 });

        series1.ticks.template.setAll({
            forceHidden: true
        });


            series1.animate({
                key: "startAngle",
                to: 180,
                loops: 1,
                duration: 2000,
                easing: am5.ease.yoyo(am5.ease.cubic)
            });

        // Set data
        // https://www.amchart4s.com/docs/v5/chart4s/percent-chart4s/pie-chart4/#Setting_data
        series1.data.setAll([{
            category: "Done",
            value: 0
        },
        //{
        //    category: "Second",
        //    value: 30
        //},
        {
            category: "Remaining",
            value: 100,
            sliceSettings: { fill: am5.color(0xdedede) }
        }]);


            seriesList.push(series0)
            seriesList.push(series1)
            seriesList.push(series3)

    }); // end am5.ready()
}

</script>


@*<a asp-controller="Home" chart5 asp-action="Index" class="btn btn-primary">Index</a>*@
<!-- Chart code -->
<script>
    var allLegends
    var root6

    var tbBarData = [
    @{
        foreach (var m in totalBenf)
        {
                                    <text>{
                                            'category': '@m.District',
                                            'male': @m.Male,
                                            'female': @m.Female,
                                            'refugeemale': @m.RefugeeMale,
                                            'refugeefemale': @m.RefugeeFemale,
                                            'total': @m.Total
                                                    }, </text>
        }
    }
            ];

    var initializeData = (function () {

        var executed = false;
        console.log("one time")
        return function () {
            if (!executed) {
                executed = true;
                rerender(tbBarData)
            }
        };
    })();
    initializeData()

    function rerender(data, button, whichChart) {
        
        var newData = data
        var chartTitle = "Total Beneficiaries"

        if (whichChart == "cbt") {
            chartTitle = "Total Number Of (CI/CIGs) - Formed"
        }
        if (whichChart == "lip") {
            chartTitle = "Livelihood Investment Plan"
        }
        if (whichChart == "tvt") {
            chartTitle = "Technical Vocational Trainings"
        }
        if (whichChart == "edp") {
            chartTitle = "Enterprise Development Program"
        }

        console.log("Data: ", data)
        console.log("Button: ", button)

         if(button == 1){
            document.getElementById("title").innerHTML = "Total Beneficieries"
            chartTitle = "Total Beneficiaries"

            count1 = 0;
            count2 = 0;
            count3 = 0;
            count4 = 0;
            count5 = 0;
            count6 = 0;

            var tI = document.getElementById("totaltableI");
            if (tI.style.display === "none") {
                tI.style.display = "block";
            }
            var allI = document.getElementById("IntertableI");
            if (allI.style.display === "none") {
                allI.style.display = "block";
            }

            var xI = document.getElementById("liptableI");
            if (xI.style.display === "block") {
                xI.style.display = "none";
            }

            var yI = document.getElementById("bsftableI");
            if (yI.style.display === "block") {
                yI.style.display = "none";
            }

            var y1I = document.getElementById("cbttableI");
            if (y1I.style.display === "block") {
                y1I.style.display = "none";
            }

            var y2I = document.getElementById("htstableI");
            if (y2I.style.display === "block") {
                y2I.style.display = "none";
            }
            var y3I = document.getElementById("edptableI");
            if (y3I.style.display === "block") {
                y3I.style.display = "none";
            }
            var y4I = document.getElementById("tvttableI");
            if (y4I.style.display === "block") {
                y4I.style.display = "none";
            }

            var t = document.getElementById("totaltable");
            if (t.style.display === "none") {
                t.style.display = "block";
            }

            var htsF = document.getElementById("htsFulltable");
            if (htsF.style.display === "block") {
                htsF.style.display = "none";
            }

            var x = document.getElementById("liptable");
            if (x.style.display === "block") {
                x.style.display = "none";
            }
            var lipbifurtitle = document.getElementById("lipbifurtitle");
            if (lipbifurtitle.style.display === "block") {
                lipbifurtitle.style.display = "none";
            }

            var lipbifurtable = document.getElementById("lipbifurtable");
            if (lipbifurtable.style.display === "block") {
                lipbifurtable.style.display = "none";
            }
            var lipbifurtable2 = document.getElementById("lipbifurtable2");
            if (lipbifurtable2.style.display === "block") {
                lipbifurtable2.style.display = "none";
            }

            var y = document.getElementById("bsftable");
            if (y.style.display === "block") {
                y.style.display = "none";
            }

            var htitle = document.getElementById("htstitle");
            if (htitle.style.display === "block") {          
                htitle.style.display = "none";
            }
                            var hts = document.getElementById("htstable");
                if (hts.style.display === "block") {
                    hts.style.display = "none";
                }

            var y1 = document.getElementById("cbttable");
            if (y1.style.display === "block") {
                y1.style.display = "none";
            }
            var y2 = document.getElementById("cicigtitle");
            if (y2.style.display === "block") {
                y2.style.display = "none";
            }
                                var y3 = document.getElementById("cicigtable");
                if (y3.style.display === "block") {
                    y3.style.display = "none";
                }
            var y4 = document.getElementById("edptable");
            if (y4.style.display === "block") {
                y4.style.display = "none";
            }
            var y5 = document.getElementById("chartdivedp");
            if (y5.style.display === "block") {
                y5.style.display = "none";
            }
            var y6 = document.getElementById("tvttable");
            if (y6.style.display === "block") {
                y6.style.display = "none";
            }

            var a = document.getElementById("labeltablelip");
            if (a.style.display === "none") {
                a.style.display = "block";
            }
                                var aa = document.getElementById("labeltablehts");
                    if (aa.style.display === "block") {
                        aa.style.display = "none";
                    }

            var b = document.getElementById("labeltablebsf");
            if (b.style.display === "block") {
                b.style.display = "none";
            }
            var b1 = document.getElementById("labeltablecbt");
            if (b1.style.display === "block") {
                b1.style.display = "none";
            }

            var xx = document.getElementById("chartdiv");
            if (xx.style.display === "none") {
                xx.style.display = "block";
            }

            var yy = document.getElementById("chartdiv2");
            if (yy.style.display === "block") {
                yy.style.display = "none";
            }

            var z1 = document.getElementById("chartdivbsf1");
            if (z1.style.display === "block") {
                z1.style.display = "none";
            }
            var z4 = document.getElementById("chartdivbsfline");
            if (z4.style.display === "block") {
                z4.style.display = "none";
            }
                                var htschart = document.getElementById("chartdivhts");
                    if (htschart.style.display === "block") {
                        htschart.style.display = "none";
                    }

            var z2 = document.getElementById("chartdivbsf2");
            if (z2.style.display === "block") {
                z2.style.display = "none";
            }
            var z3 = document.getElementById("chartdivtvt1");
            if (z3.style.display === "block") {
                z3.style.display = "none";
            }
            var z4 = document.getElementById("chartdivtvt2");
            if (z4.style.display === "block") {
                z4.style.display = "none";
            }


            var zz3 = document.getElementById("cbtChartDiv2");
            if (zz3.style.display === "block") {
                zz3.style.display = "none";
            }

            //First Chart
            seriesList[0].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })
            seriesList[1].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })

            //Second Chart
            seriesList[3].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })
            seriesList[4].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })

            //Third Chart
            seriesList[6].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })
            seriesList[7].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })

            //Fourth Chart
            seriesList[9].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })
            seriesList[10].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })

            //Fifth Chart
            seriesList[12].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })
            seriesList[13].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })

            //Sixth Chart
            seriesList[15].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })
            seriesList[16].slices.template.setAll({
                fill: am5.color(0x67B7DC),
                stroke: am5.color(0x67B7DC)
            })


            if (root6) {
                root6.dispose()
            }
            if (root11) {
                root11.dispose()
            }
        }

        am5.ready(function () {

            // Create root6 element
            // https://www.amchart5s.com/docs/v5/getting-started/#Root_element
            root6 = am5.Root.new("chartdiv");


            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root6.setThemes([
                am5themes_Animated.new(root6)
            ]);


            // Create chart
            // https://www.amcharts.com/docs/v5/charts/xy-chart/
            var chart6 = root6.container.children.push(am5xy.XYChart.new(root6, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root6.verticalLayout

            }));
            /***
           * ci 1
           * ci 2
           * cig 1
           * cig 2
           * total
           */
            chart6.get("colors").set("colors", [
                am5.color(0x68A7AD), 
                am5.color(0x0B666A),
                am5.color(0x7A9D54),
                am5.color(0x6892D5),
                am5.color(0x394A6D)
            ]);
            //am5.color(0x095256),
            //    am5.color(0x087f8c),
            //    am5.color(0x5aaa95),
            //    am5.color(0x86a000),
            //    am5.color(0xbb9f06)

            chart6.children.unshift(am5.Label.new(root6, {
                text: chartTitle,
                fontSize: 22,
                fontWeight: "500",
                fill: chart6.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                //y: am5.percent(0),
                centerX: am5.percent(-5),
                paddingTop: -20,
                //paddingBottom: 30
            }));



            // Create axes
            // https://www.amchart6s.com/docs/v5/chart6s/xy-chart6/axes/
            var yRenderer = am5xy.AxisRendererY.new(root6, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart6.yAxes.push(am5xy.CategoryAxis.new(root6, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root6, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yRenderer.labels.template.setAll({
              oversizedBehavior: "wrap",
              textAlign: "center"
            });

            yAxis.data.setAll(data);

            var xAxis = chart6.xAxes.push(am5xy.ValueAxis.new(root6, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root6, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amchart6s.com/docs/v5/chart6s/xy-chart6/legend-xy-series/
            var legend = chart6.children.push(am5.Legend.new(root6, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amchart6s.com/docs/v5/chart6s/xy-chart6/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart6.series.push(am5xy.ColumnSeries.new(root6, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category",
                    clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                if (name.includes("CI") || name.includes("Host Community")) {
                    console.log("CI")
                    series.columns.template.setAll({
                        tooltipText: "Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else if (name.includes("CIG")) {
                    console.log("CIG")
                    series.columns.template.setAll({
                        tooltipText: "Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else if(name.includes("Refugees")){
                    series.columns.template.setAll({
                        tooltipText: "Refugee Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else {
                    series.columns.template.setAll({
                        tooltipText: "{name}, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amchart6s.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root6, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root6, {
                            text: "{valueX}",
                            fill: root6.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });


                
                    legend.itemContainers.template.events.on("click", function (item) {

                        console.log("item", item.target)
                        var right = item.target._localBounds.right

                        console.log("right: ", right)
                        console.log("Includes: ", item.target.uid)
                        // item: 100, 122, 144, 166
                        // series: 85, 107, 129, 151

                        //142, includes 601

                        // male: 116.234375,
                        // target: 681
                        // hc: 99.50830078125
                        // target: 702
                        // rm: 116.234375
                        // target
                        // r: 108.4267578125
                        // target
                        // t: 115.32666015625
                        // target
                        var series1 = chart6.series.getIndex(0);
                        var series2 = chart6.series.getIndex(1);
                        var series3 = chart6.series.getIndex(2);
                        var series4 = chart6.series.getIndex(3);

                        var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                        var boundsInit = [122.75, 116.234375]//

                        var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                        var boundsTB = [207.3203125, 102.1640625, 184.94775390625, 99.50830078125, 173.04762268066406]//

                        var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                        var boundsLIP = [184.8203125, 166.66650390625]//

                        var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                        var boundsCBT = [152.4765625, 113.140625, 140.38720703125, 108.4267578125, 135.42856979370117]//

                        var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                        var boundsEBP = [121.6328125, 115.32666015625, 113.28571510314941]//


                        //ANDROID: 173.04762268066406 486, 135.42856979370117 528, 113.28571510314941 549
                        if (window.innerWidth > 768) {
                            if (/*listInit.includes(item.target.uid) ||*/ boundsInit.includes(right)) {
                                console.log("init")
                                if (series1.get("visible")) {
                                    console.log("Visible")
                                    //series1.hide();
                                    series2.hide();
                                }
                                else {
                                    console.log("Hidden", series1.isHidden())
                                    if (series1.isHidden()) {
                                        // series1.show();
                                    }
                                    series2.show()
                                }
                                //series1.show()

                                series3.hide()
                                series4.hide()
                            }

                            if (/*listTB.includes(item.target.uid) ||*/ boundsTB.includes(right)) {
                                console.log("TB")
                                if (series2.get("visible")) {
                                    console.log("Visible")
                                    //series1.hide();
                                    series1.hide();
                                }
                                else {
                                    console.log("Hidden", series2.isHidden())
                                    if (series2.isHidden()) {
                                        // series1.show();
                                    }
                                    series1.show()
                                }
                                //series1.show()

                                series3.hide()
                                series4.hide()
                            }

                            if (/*listLIP.includes(item.target.uid) ||*/ boundsLIP.includes(right)) {
                                console.log("LIP")
                                if (series3.get("visible")) {
                                    console.log("Visible")
                                    //series1.hide();
                                    series4.hide();
                                }
                                else {
                                    console.log("Hidden", series3.isHidden())
                                    if (series3.isHidden()) {
                                        // series1.show();
                                    }
                                    series4.show()
                                }
                                //series1.show()

                                series1.hide()
                                series2.hide()
                            }

                            if (/*listCBT.includes(item.target.uid) ||*/ boundsCBT.includes(right)) {
                                console.log("CBT")
                                if (series4.get("visible")) {
                                    console.log("Visible")
                                    //series1.hide();
                                    series3.hide();
                                }
                                else {
                                    console.log("Hidden", series4.isHidden())
                                    if (series4.isHidden()) {
                                        // series1.show();
                                    }
                                    series3.show()
                                }
                                //series1.show()

                                series1.hide()
                                series2.hide()
                            }

                        }
                    });               
                
                legend.data.push(series);

                if (window.innerWidth > 768) { 
                    allLegends = legend.allChildren()
                    console.log(" All LEGEND: ", allLegends)
                    allLegends[0].hide()
                    if (allLegends[2]) {
                        allLegends[2].hide()
                    }

                    if (hidden) {
                        series.hide();
                    }
                    else {
                        series.appear();
                    }
                }                
            }

            if (window.innerWidth < 768) {
                if (whichChart == "cbt") {
                    makeSeries("Male", "male", true, true);
                    makeSeries("Female", "female", true, true)
                    makeSeries("Refugee Male", "refugeemale", false, false)
                    makeSeries("Refugee Female", "refugeefemale", true, false)
                    makeSeries("Total", "total", false, false)

                    var a = document.getElementById("labeltablelip");
                    if (a.style.display === "block") {
                        a.style.display = "none";
                    }
                    var aa = document.getElementById("labeltablehts");
                    if (aa.style.display === "block") {
                        aa.style.display = "none";
                    }
                    var b = document.getElementById("labeltablebsf");
                    if (b.style.display === "block") {
                        b.style.display = "none";
                    }
                    var c = document.getElementById("labeltablecbt");
                    if (c.style.display === "none") {
                        c.style.display = "block";
                    }

                }
                else {
                    makeSeries("Male", "male", true, false);
                    makeSeries("Female", "female", true, false)
                    makeSeries("Refugee Male", "refugeemale", false, true)
                    makeSeries("Refugee Female", "refugeefemale", true, true)
                    makeSeries("Total", "total", false, false)
                }

            }
            else {
                if (whichChart == "cbt") {
                    makeSeries("Male", "male", true, true);
                    makeSeries("CI", "female", true, true)
                    makeSeries("Male", "refugeemale", true, false)
                    makeSeries("CIG", "refugeefemale", true, false)
                    makeSeries("Total", "total", false, false)

                    var a = document.getElementById("labeltablelip");
                    if (a.style.display === "block") {
                        a.style.display = "none";
                    }
                    var aa = document.getElementById("labeltablehts");
                    if (aa.style.display === "block") {
                        aa.style.display = "none";
                    }
                    var b = document.getElementById("labeltablebsf");
                    if (b.style.display === "block") {
                        b.style.display = "none";
                    }
                    var c = document.getElementById("labeltablecbt");
                    if (c.style.display === "none") {
                        c.style.display = "block";
                    }

                }
                else {
                    makeSeries("Male", "male", true, false);
                    makeSeries("Host Community", "female", true, false)
                    makeSeries("Refugee Male", "refugeemale", true, true)
                    makeSeries("Refugees", "refugeefemale", true, true)
                    makeSeries("Total", "total", false, false)
                }

            }
           

            // Make stuff animate on load
            // https://www.amchart6s.com/docs/v5/concepts/animations/
            chart6.appear(1000, 100);

        }); // end am5.ready()


    }

    function clicked(e) {
        console.log("Clicked", e)

        data = [{
            "category": "Killa Abdullah",
            "male": 22,
            "female": 45,
            "refugeemale": 13,
            "refugeefemale": 13,
            "total": 110


        }, {
            "category": "Killa Saifullah",
            "male": 25,
            "female": 45,
            "refugeemale": 15,
            "refugeefemale": 15,
            "total": 85

        }, {
            "category": "Sherani",
            "male": 32,
            "female": 5,
            "refugeemale": 13,
            "refugeefemale": 13,
            "total": 50

        }, {
            "category": "Chagai",
            "male": 15,
            "female": 35,
            "refugeemale": 15,
            "refugeefemale": 15,
            "total": 65

        },
        {
            "category": "Nushki",
            "male": 72,
            "female": 13,
            "refugeemale": 25,
            "refugeefemale": 25,
            "total": 110

        },
        {
            "category": "Pishin",
            "male": 32,
            "female": 24,
            "refugeemale": 34,
            "refugeefemale": 34,
            "total": 90

        },
        {
            "category": "Zhob",
            "male": 53,
            "female": 55,
            "refugeemale": 22,
            "refugeefemale": 22,
            "total": 130

        },
        {
            "category": "Mastung",
            "male": 21,
            "female": 65,
            "refugeemale": 44,
            "refugeefemale": 44,
            "total": 130

        },
        {
            "category": "Quetta",
            "male": 5,
            "female": 5,
            "refugeemale": 9,
            "refugeefemale": 9,
            "total": 19

        }]

        root6.dispose();
        rerender(data)
        //columnStart(barData)
    }


</script>


@*<a asp-controller="Home" asp-action="Index" class="btn btn-primary">Index</a>*@
<!-- Chart code -->
<script>
    var allLegends
    var root11


    var jobj = [
    @{
        foreach (var m in TBBarData)
        {
                                    <text>{                          
                                            'category': '@m.District',
                                            'male': @m.Male,
                                            'female': @m.Female,
                                            'refugeemale': @m.RefugeeMale,
                                            'refugeefemale': @m.RefugeeFemale,
                                            'total': @m.Total
                                      }, </text>                                  
        }
    }
                ];

    function renderBSF(data, button) {
        var newData = data
        console.log("Data: ", data)
        console.log("Button: ", button)

        if (button == 1) {
            document.getElementById("title").innerHTML = "Total Beneficiaries"
            root6.dispose()
        }
        //root6.dispose()
        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root11 = am5.Root.new("chartdiv2");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root11.setThemes([
                am5themes_Animated.new(root11)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart11 = root11.container.children.push(am5xy.XYChart.new(root11, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root11.verticalLayout

            }));
            chart11.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);



            chart11.children.unshift(am5.Label.new(root11, {
                text: "BSF (Government & Private)",
                fontSize: 22,
                fontWeight: "500",
                fill: chart11.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                //y: am5.percent(0),
                centerX: am5.percent(-5),
                paddingTop: -20,
                //paddingBottom: 30
            }));



            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart11/axes/
            var yRenderer = am5xy.AxisRendererY.new(root11, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart11.yAxes.push(am5xy.CategoryAxis.new(root11, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root11, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })


            yAxis.data.setAll(data);

            var xAxis = chart11.xAxes.push(am5xy.ValueAxis.new(root11, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root11, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart11/legend-xy-series/
            var legend = chart11.children.push(am5.Legend.new(root11, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart11/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart11.series.push(am5xy.ColumnSeries.new(root11, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category",
                    clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                if (name.includes("Host Community")) {
                    console.log("Host Community")
                    series.columns.template.setAll({
                        tooltipText: "Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else if (name.includes("Refugees")) {
                    console.log("Refugees")
                    series.columns.template.setAll({
                        tooltipText: "Refugee Female, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }
                else {
                    series.columns.template.setAll({
                        tooltipText: "{name}, {categoryY}:{valueX}",
                        width: am5.percent(90),
                        tooltipY: am5.percent(10)
                    });
                }


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root11, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root11, {
                            text: "{valueX}",
                            fill: root11.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });


                legend.itemContainers.template.events.on("click", function (item) {

                    console.log("item", item.target)
                    var right = item.target._localBounds.right

                    console.log("right: ", right)
                    console.log("Includes: ", item.target.uid)
                    // item: 100, 122, 144, 166
                    // series: 85, 107, 129, 151
                    var series1 = chart11.series.getIndex(0);
                    var series2 = chart11.series.getIndex(1);
                    var series3 = chart11.series.getIndex(2);
                    var series4 = chart11.series.getIndex(3);

                    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                    var boundsInit = [122.75]
                    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                    var boundsTB = [207.3203125]//184.94775390625
                    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                    var boundsLIP = [184.8203125]
                    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                    var boundsCBT = [152.4765625]
                    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                    var boundsEBP = [121.6328125]

                });

                legend.data.push(series);


                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Government", "government", false, false);
            makeSeries("Private", "private", false, false);


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart11.appear(1000, 100);

        }); // end am5.ready()


    }

    function clicked(e) {
        console.log("Clicked", e)

        data = [{
            "category": "Killa Abdullah",
            "male": 22,
            "female": 45,
            "refugeemale": 13,
            "refugeefemale": 13,
            "total": 110


        }, {
            "category": "Killa Saifullah",
            "male": 25,
            "female": 45,
            "refugeemale": 15,
            "refugeefemale": 15,
            "total": 85

        }, {
            "category": "Sherani",
            "male": 32,
            "female": 5,
            "refugeemale": 13,
            "refugeefemale": 13,
            "total": 50

        }, {
            "category": "Chagai",
            "male": 15,
            "female": 35,
            "refugeemale": 15,
            "refugeefemale": 15,
            "total": 65

        },
        {
            "category": "Nushki",
            "male": 72,
            "female": 13,
            "refugeemale": 25,
            "refugeefemale": 25,
            "total": 110

        },
        {
            "category": "Pishin",
            "male": 32,
            "female": 24,
            "refugeemale": 34,
            "refugeefemale": 34,
            "total": 90

        },
        {
            "category": "Zhob",
            "male": 53,
            "female": 55,
            "refugeemale": 22,
            "refugeefemale": 22,
            "total": 130

        },
        {
            "category": "Mastung",
            "male": 21,
            "female": 65,
            "refugeemale": 44,
            "refugeefemale": 44,
            "total": 130

        },
        {
            "category": "Quetta",
            "male": 5,
            "female": 5,
            "refugeemale": 9,
            "refugeefemale": 9,
            "total": 19

        }]

        root.dispose();
        rerender(data)
        //columnStart(barData)
    }


</script>



@*          BSF
    SECOND ROW TWO CHART
*@

<!-- Chart code -->
<script>
    var allLegends
    var root12

    var jobj = [
    @{
        foreach (var m in TBBarData)
        {
                                    <text>{
                                            'category': '@m.District',
                                            'male': @m.Male,
                                            'female': @m.Female,
                                            'refugeemale': @m.RefugeeMale,
                                            'refugeefemale': @m.RefugeeFemale,
                                            'total': @m.Total
                                                  }, </text>
        }
    }
                    ];

    //console.log("JOBJ: ", jobj)
    //console.log("OBJ: ", data)

    function renderbsf1(data, button) {
        var newData = data
        console.log("Data BSF: ", data)
        console.log("Button: ", button)

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root12 = am5.Root.new("chartdivbsf1");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root12.setThemes([
                am5themes_Animated.new(root12)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart12 = root12.container.children.push(am5xy.XYChart.new(root12, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root12.verticalLayout

            }));
            chart12.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart12.children.unshift(am5.Label.new(root12, {
                text: "Business Support Facility (Government)",
                fontSize: 18,
                fontWeight: "500",
                fill: chart12.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));


            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart12/axes/
            var yRenderer = am5xy.AxisRendererY.new(root12, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart12.yAxes.push(am5xy.CategoryAxis.new(root12, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root12, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart12.xAxes.push(am5xy.ValueAxis.new(root12, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root12, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart12/legend-xy-series/
            var legend = chart12.children.push(am5.Legend.new(root12, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart12/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart12.series.push(am5xy.ColumnSeries.new(root12, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category"
                    //clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                series.columns.template.setAll({
                    tooltipText: "{name}, {categoryY}:{valueX}",
                    width: am5.percent(90),
                    tooltipY: am5.percent(10)
                });

                //if (name.includes("Host Community")) {
                //    console.log("Host Community")
                //    series.columns.template.setAll({
                //        tooltipText: "Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else if (name.includes("Refugees")) {
                //    console.log("Refugees")
                //    series.columns.template.setAll({
                //        tooltipText: "Refugee Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else {
                //    series.columns.template.setAll({
                //        tooltipText: "{name}, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root12, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root12, {
                            text: "{valueX}",
                            fill: root12.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });



                //legend.itemContainers.template.events.on("click", function (item) {

                //    console.log("item", item.target)
                //    var right = item.target._localBounds.right

                //    console.log("right: ", right)
                //    console.log("Includes: ", item.target.uid)
                //    // item: 100, 122, 144, 166
                //    // series: 85, 107, 129, 151
                //    var series1 = chart12.series.getIndex(0);
                //    var series2 = chart12.series.getIndex(1);
                //    var series3 = chart12.series.getIndex(2);
                //    var series4 = chart12.series.getIndex(3);

                //    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                //    var boundsInit = [122.75]
                //    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                //    var boundsTB = [207.3203125]//184.94775390625
                //    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                //    var boundsLIP = [184.8203125]
                //    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                //    var boundsCBT = [152.4765625]
                //    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                //    var boundsEBP = [121.6328125]



                //    if (/*listInit.includes(item.target.uid) ||*/ boundsInit.includes(right)) {
                //        console.log("init")
                //        if (series1.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series2.hide();
                //        }
                //        else {
                //            console.log("Hidden", series1.isHidden())
                //            if (series1.isHidden()) {
                //                // series1.show();
                //            }
                //            series2.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listTB.includes(item.target.uid) || */boundsTB.includes(right)) {
                //        console.log("TB")
                //        if (series2.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series1.hide();
                //        }
                //        else {
                //            console.log("Hidden", series2.isHidden())
                //            if (series2.isHidden()) {
                //                // series1.show();
                //            }
                //            series1.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listLIP.includes(item.target.uid) || */boundsLIP.includes(right)) {
                //        console.log("LIP")
                //        if (series3.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series4.hide();
                //        }
                //        else {
                //            console.log("Hidden", series3.isHidden())
                //            if (series3.isHidden()) {
                //                // series1.show();
                //            }
                //            series4.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //    if (/*listCBT.includes(item.target.uid) ||*/ boundsCBT.includes(right)) {
                //        console.log("CBT")
                //        if (series4.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series3.hide();
                //        }
                //        else {
                //            console.log("Hidden", series4.isHidden())
                //            if (series4.isHidden()) {
                //                // series1.show();
                //            }
                //            series3.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //});

                legend.data.push(series);


                //allLegends = legend.allChildren()
                //console.log(" All LEGEND: ", allLegends)
                //allLegends[0].hide()
                //if (allLegends[2]) {
                //    allLegends[2].hide()
                //}

                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Livestock", "livestock", false, false);
            makeSeries("Forest", "forest", false, false)

            //makeSeries("New", "newls", true, true);
            //makeSeries("Rehab", "rehabls", true, true)
            //makeSeries("Both", "bothls", true, false)
            //makeSeries("New", "newf", true, true);
            //makeSeries("Rehab", "rehabf", true, true)
            //makeSeries("Both", "bothf", true, false)

            //makeSeries("Europe", "europe", false);
            //makeSeries("North America", "namerica", true);
            //makeSeries("Asia", "asia", false);
            //makeSeries("Latin America", "lamerica", true);
            //makeSeries("Middle East", "meast", true);
            //makeSeries("Africa", "africa", true);


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart12.appear(1000, 100);

        }); // end am5.ready()


    }

</script>

<!-- Chart code -->
<script>
    var allLegends
    var root13

    var jobj = [
    @{
        foreach (var m in TBBarData)
        {
                                    <text>{
                                            'category': '@m.District',
                                            'male': @m.Male,
                                            'female': @m.Female,
                                            'refugeemale': @m.RefugeeMale,
                                            'refugeefemale': @m.RefugeeFemale,
                                            'total': @m.Total
                                                  }, </text>
        }
    }
                    ];

    //console.log("JOBJ: ", jobj)
    //console.log("OBJ: ", data)

    function renderbsf2(data, button) {
        var newData = data
        console.log("Data BSF: ", data)
        console.log("Button: ", button)

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root13 = am5.Root.new("chartdivbsf2");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root13.setThemes([
                am5themes_Animated.new(root13)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart13 = root13.container.children.push(am5xy.XYChart.new(root13, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root13.verticalLayout

            }));
            chart13.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart13.children.unshift(am5.Label.new(root13, {
                text: "Business Support Facility (Private)",
                fontSize: 18,
                fontWeight: "500",
                fill: chart13.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));

            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart13/axes/
            var yRenderer = am5xy.AxisRendererY.new(root13, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart13.yAxes.push(am5xy.CategoryAxis.new(root13, {
                categoryField: "sector",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root13, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart13.xAxes.push(am5xy.ValueAxis.new(root13, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root13, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart13/legend-xy-series/
            var legend = chart13.children.push(am5.Legend.new(root13, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart13/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart13.series.push(am5xy.ColumnSeries.new(root13, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "sector"
                    //clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                series.columns.template.setAll({
                    tooltipText: "{name}, {categoryY}:{valueX}",
                    width: am5.percent(90),
                    tooltipY: am5.percent(10)
                });

                //if (name.includes("Host Community")) {
                //    console.log("Host Community")
                //    series.columns.template.setAll({
                //        tooltipText: "Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else if (name.includes("Refugees")) {
                //    console.log("Refugees")
                //    series.columns.template.setAll({
                //        tooltipText: "Refugee Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else {
                //    series.columns.template.setAll({
                //        tooltipText: "{name}, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root13, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root13, {
                            text: "{valueX}",
                            fill: root13.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });



                //legend.itemContainers.template.events.on("click", function (item) {

                //    console.log("item", item.target)
                //    var right = item.target._localBounds.right

                //    console.log("right: ", right)
                //    console.log("Includes: ", item.target.uid)
                //    // item: 100, 122, 144, 166
                //    // series: 85, 107, 129, 151
                //    var series1 = chart13.series.getIndex(0);
                //    var series2 = chart13.series.getIndex(1);
                //    var series3 = chart13.series.getIndex(2);
                //    var series4 = chart13.series.getIndex(3);

                //    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                //    var boundsInit = [122.75]
                //    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                //    var boundsTB = [207.3203125]//184.94775390625
                //    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                //    var boundsLIP = [184.8203125]
                //    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                //    var boundsCBT = [152.4765625]
                //    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                //    var boundsEBP = [121.6328125]



                //    if (/*listInit.includes(item.target.uid) ||*/ boundsInit.includes(right)) {
                //        console.log("init")
                //        if (series1.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series2.hide();
                //        }
                //        else {
                //            console.log("Hidden", series1.isHidden())
                //            if (series1.isHidden()) {
                //                // series1.show();
                //            }
                //            series2.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listTB.includes(item.target.uid) || */boundsTB.includes(right)) {
                //        console.log("TB")
                //        if (series2.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series1.hide();
                //        }
                //        else {
                //            console.log("Hidden", series2.isHidden())
                //            if (series2.isHidden()) {
                //                // series1.show();
                //            }
                //            series1.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listLIP.includes(item.target.uid) || */boundsLIP.includes(right)) {
                //        console.log("LIP")
                //        if (series3.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series4.hide();
                //        }
                //        else {
                //            console.log("Hidden", series3.isHidden())
                //            if (series3.isHidden()) {
                //                // series1.show();
                //            }
                //            series4.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //    if (/*listCBT.includes(item.target.uid) ||*/ boundsCBT.includes(right)) {
                //        console.log("CBT")
                //        if (series4.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series3.hide();
                //        }
                //        else {
                //            console.log("Hidden", series4.isHidden())
                //            if (series4.isHidden()) {
                //                // series1.show();
                //            }
                //            series3.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //});

                legend.data.push(series);


                //allLegends = legend.allChildren()
                //console.log(" All LEGEND: ", allLegends)
                //allLegends[0].hide()
                //if (allLegends[2]) {
                //    allLegends[2].hide()
                //}

                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Male", "male", false, false);
            makeSeries("Female", "female", false, false)


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart13.appear(1000, 100);

        }); // end am5.ready()
    }

</script>


@*          HTS
    HTS CHART OF BSF START
*@

<!-- Chart code -->
<script>
    var allLegends
    var root17


    function renderhts(data, button) {
        var newData = data

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root17 = am5.Root.new("chartdivhts");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root17.setThemes([
                am5themes_Animated.new(root17)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart17 = root17.container.children.push(am5xy.XYChart.new(root17, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root17.verticalLayout

            }));
            chart17.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart17.children.unshift(am5.Label.new(root17, {
                text: "High Tunnel System",
                fontSize: 18,
                fontWeight: "500",
                fill: chart17.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));

            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart17/axes/
            var yRenderer = am5xy.AxisRendererY.new(root17, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart17.yAxes.push(am5xy.CategoryAxis.new(root17, {
                categoryField: "sector",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root17, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart17.xAxes.push(am5xy.ValueAxis.new(root17, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root17, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart17/legend-xy-series/
            var legend = chart17.children.push(am5.Legend.new(root17, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart17/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart17.series.push(am5xy.ColumnSeries.new(root17, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "sector"
                    //clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                series.columns.template.setAll({
                    tooltipText: "{name}, {categoryY}:{valueX}",
                    width: am5.percent(90),
                    tooltipY: am5.percent(10)
                });

               

                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root17, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root17, {
                            text: "{valueX}",
                            fill: root17.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });


                legend.data.push(series);


                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Male", "male", false, false);
            makeSeries("Female", "female", false, false)


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart17.appear(1000, 100);

        }); // end am5.ready()
    }

</script>

@*      HTS ENDS
    HTS CHART OF BSF
*@


@*          EDP
    EDP CHART OF EDP START
*@

<!-- Chart code -->
<script>
    var allLegends
    var root117


    function renderedp(data, button) {
        var newData = data

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root117 = am5.Root.new("chartdivedp");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root117.setThemes([
                am5themes_Animated.new(root117)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart117 = root117.container.children.push(am5xy.XYChart.new(root117, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root117.verticalLayout

            }));
            chart117.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart117.children.unshift(am5.Label.new(root117, {
                text: "EDP",
                fontSize: 18,
                fontWeight: "500",
                fill: chart117.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));

            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart117/axes/
            var yRenderer = am5xy.AxisRendererY.new(root117, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart117.yAxes.push(am5xy.CategoryAxis.new(root117, {
                categoryField: "district",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root117, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart117.xAxes.push(am5xy.ValueAxis.new(root117, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root117, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart117/legend-xy-series/
            var legend = chart117.children.push(am5.Legend.new(root117, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart117/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart117.series.push(am5xy.ColumnSeries.new(root117, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "district"
                    //clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                series.columns.template.setAll({
                    tooltipText: "{name}, {categoryY}:{valueX}",
                    width: am5.percent(90),
                    tooltipY: am5.percent(10)
                });



                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root117, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root117, {
                            text: "{valueX}",
                            fill: root117.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });


                legend.data.push(series);


                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Male", "male", false, false);
            makeSeries("Female", "female", false, false)


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart117.appear(1000, 100);

        }); // end am5.ready()
    }

</script>

@*      EDP ENDS
    EDP CHART OF EDP
*@

@*          BSF
    SECOND ROW AND THIRD ROW THREE CHARTS END.........
*@


@*          TVT
    SECOND ROW TWO CHART
*@


<!-- Chart code -->
<script>
    var allLegends
    var root15

    var jobj = [
    @{
        foreach (var m in TBBarData)
        {
                                    <text>{
                                            'category': '@m.District',
                                            'male': @m.Male,
                                            'female': @m.Female,
                                            'refugeemale': @m.RefugeeMale,
                                            'refugeefemale': @m.RefugeeFemale,
                                            'total': @m.Total
                                                              }, </text>
        }
    }
                        ];


    function rendertvt1(data, button) {
        var newData = data
        console.log("Data TVT: ", data)
        console.log("Button: ", button)

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root15 = am5.Root.new("chartdivtvt1");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root15.setThemes([
                am5themes_Animated.new(root15)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart15 = root15.container.children.push(am5xy.XYChart.new(root15, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root15.verticalLayout

            }));
            chart15.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);

            chart15.children.unshift(am5.Label.new(root15, {
                text: "Technical And Vocational Trainings (Refugees)",
                fontSize: 18,
                fontWeight: "500",
                fill: chart15.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(10),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));


            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart15/axes/
            var yRenderer = am5xy.AxisRendererY.new(root15, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart15.yAxes.push(am5xy.CategoryAxis.new(root15, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root15, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart15.xAxes.push(am5xy.ValueAxis.new(root15, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root15, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart15/legend-xy-series/
            var legend = chart15.children.push(am5.Legend.new(root15, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart15/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart15.series.push(am5xy.ColumnSeries.new(root15, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category"
                }));

                series.columns.template.setAll({
                    tooltipText: "{name}, {categoryY}:{valueX}",
                    width: am5.percent(90),
                    tooltipY: am5.percent(10)
                });


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root15, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root15, {
                            text: "{valueX}",
                            fill: root15.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });

                legend.data.push(series);


                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Male", "male", false, false);
            makeSeries("Female", "female", false, false)


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart15.appear(1000, 100);

        }); // end am5.ready()


    }

</script>

<!-- Chart code -->
<script>
    var allLegends
    var root16

    var jobj = [
    @{
        foreach (var m in TBBarData)
        {
                                    <text>{
                                            'category': '@m.District',
                                            'male': @m.Male,
                                            'female': @m.Female,
                                            'refugeemale': @m.RefugeeMale,
                                            'refugeefemale': @m.RefugeeFemale,
                                            'total': @m.Total
                                                              }, </text>
        }
    }
                        ];

    //console.log("JOBJ: ", jobj)
    //console.log("OBJ: ", data)

    function rendertvt2(data, button) {
        var newData = data
        console.log("Data BSF: ", data)
        console.log("Button: ", button)

        am5.ready(function () {

            // Create root6 element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            root16 = am5.Root.new("chartdivtvt2");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root16.setThemes([
                am5themes_Animated.new(root16)
            ]);

            // Create chart6
            // https://www.amcharts.com/docs/v5/charts/xy-chart6/
            var chart16 = root16.container.children.push(am5xy.XYChart.new(root16, {
                panX: false,
                panY: false,
                wheelX: "panX",
                wheelY: "zoomX",
                layout: root16.verticalLayout

            }));
            chart16.get("colors").set("colors", [
                am5.color(0x095256),
                am5.color(0x087f8c),
                am5.color(0x5aaa95),
                am5.color(0x86a000),
                am5.color(0xbb9f06)
            ]);


            chart16.children.unshift(am5.Label.new(root16, {
                text: "Technical And Vocational Trainings (Host)",
                fontSize: 18,
                fontWeight: "500",
                fill: chart16.get("colors").getIndex(1),
                textAlign: "center",
                //x: am5.percent(50),
                centerX: am5.percent(-5),
                paddingTop: 0,
                paddingBottom: 30
            }));


            // Create axes
            // https://www.amcharts.com/docs/v5/charts/xy-chart16/axes/
            var yRenderer = am5xy.AxisRendererY.new(root16, {
                cellStartLocation: 0.1,
                cellEndLocation: 0.9
            });

            var yAxis = chart16.yAxes.push(am5xy.CategoryAxis.new(root16, {
                categoryField: "category",
                renderer: yRenderer,
                tooltip: am5.Tooltip.new(root16, {})
            }));

            yRenderer.grid.template.setAll({
                location: 1
            })

            yAxis.data.setAll(newData);

            var xAxis = chart16.xAxes.push(am5xy.ValueAxis.new(root16, {
                min: 0,
                renderer: am5xy.AxisRendererX.new(root16, {
                    strokeOpacity: 0.1
                })
            }));

            // Add legend
            // https://www.amcharts.com/docs/v5/charts/xy-chart16/legend-xy-series/
            var legend = chart16.children.push(am5.Legend.new(root16, {
                centerX: am5.p50,
                x: am5.p50
            }));


            // Add series
            // https://www.amcharts.com/docs/v5/charts/xy-chart16/series/
            function makeSeries(name, fieldName, stacked, hidden) {
                var series = chart16.series.push(am5xy.ColumnSeries.new(root16, {
                    stacked: stacked,
                    name: name,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    valueXField: fieldName,
                    categoryYField: "category"
                    //clickTarget: "none"
                    //legendLabelText: "Series: {name}",
                    //legendRangeLabelText: "Series: {name}"
                }));

                series.columns.template.setAll({
                    tooltipText: "{name}, {categoryY}:{valueX}",
                    width: am5.percent(90),
                    tooltipY: am5.percent(10)
                });

                //if (name.includes("Host Community")) {
                //    console.log("Host Community")
                //    series.columns.template.setAll({
                //        tooltipText: "Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else if (name.includes("Refugees")) {
                //    console.log("Refugees")
                //    series.columns.template.setAll({
                //        tooltipText: "Refugee Female, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}
                //else {
                //    series.columns.template.setAll({
                //        tooltipText: "{name}, {categoryY}:{valueX}",
                //        width: am5.percent(90),
                //        tooltipY: am5.percent(10)
                //    });
                //}


                series.data.setAll(newData);

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                // series.appear();

                series.bullets.push(function () {
                    return am5.Bullet.new(root16, {
                        locationY: 0.5,
                        sprite: am5.Label.new(root16, {
                            text: "{valueX}",
                            fill: root16.interfaceColors.get("alternativeText"),
                            centerY: am5.percent(50),
                            centerX: am5.percent(50),
                            populateText: true
                        })
                    });
                });



                //legend.itemContainers.template.events.on("click", function (item) {

                //    console.log("item", item.target)
                //    var right = item.target._localBounds.right

                //    console.log("right: ", right)
                //    console.log("Includes: ", item.target.uid)
                //    // item: 100, 122, 144, 166
                //    // series: 85, 107, 129, 151
                //    var series1 = chart16.series.getIndex(0);
                //    var series2 = chart16.series.getIndex(1);
                //    var series3 = chart16.series.getIndex(2);
                //    var series4 = chart16.series.getIndex(3);

                //    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
                //    var boundsInit = [122.75]
                //    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                //    var boundsTB = [207.3203125]//184.94775390625
                //    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
                //    var boundsLIP = [184.8203125]
                //    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                //    var boundsCBT = [152.4765625]
                //    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                //    var boundsEBP = [121.6328125]



                //    if (/*listInit.includes(item.target.uid) ||*/ boundsInit.includes(right)) {
                //        console.log("init")
                //        if (series1.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series2.hide();
                //        }
                //        else {
                //            console.log("Hidden", series1.isHidden())
                //            if (series1.isHidden()) {
                //                // series1.show();
                //            }
                //            series2.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listTB.includes(item.target.uid) || */boundsTB.includes(right)) {
                //        console.log("TB")
                //        if (series2.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series1.hide();
                //        }
                //        else {
                //            console.log("Hidden", series2.isHidden())
                //            if (series2.isHidden()) {
                //                // series1.show();
                //            }
                //            series1.show()
                //        }
                //        //series1.show()

                //        series3.hide()
                //        series4.hide()
                //    }

                //    if (/*listLIP.includes(item.target.uid) || */boundsLIP.includes(right)) {
                //        console.log("LIP")
                //        if (series3.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series4.hide();
                //        }
                //        else {
                //            console.log("Hidden", series3.isHidden())
                //            if (series3.isHidden()) {
                //                // series1.show();
                //            }
                //            series4.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //    if (/*listCBT.includes(item.target.uid) ||*/ boundsCBT.includes(right)) {
                //        console.log("CBT")
                //        if (series4.get("visible")) {
                //            console.log("Visible")
                //            //series1.hide();
                //            series3.hide();
                //        }
                //        else {
                //            console.log("Hidden", series4.isHidden())
                //            if (series4.isHidden()) {
                //                // series1.show();
                //            }
                //            series3.show()
                //        }
                //        //series1.show()

                //        series1.hide()
                //        series2.hide()
                //    }

                //});

                legend.data.push(series);


                //allLegends = legend.allChildren()
                //console.log(" All LEGEND: ", allLegends)
                //allLegends[0].hide()
                //if (allLegends[2]) {
                //    allLegends[2].hide()
                //}

                if (hidden) {
                    series.hide();
                }
                else {
                    series.appear();
                }
            }

            makeSeries("Male", "male", false, false);
            makeSeries("Female", "female", false, false)


            // Make stuff animate on load
            // https://www.amcharts.com/docs/v5/concepts/animations/
            chart16.appear(1000, 100);

        }); // end am5.ready()
    }

</script>


@*          TVT
    SECOND ROW TWO CHARTS END.........
*@


@*          CBT
    CBT MAIN CHART CI/CIGs
*@




<!-- Chart code -->
<script>
    var allLegends
    var root14
    var data = [{
        "category": "Killa Abdullah",
        "male": 22,
        "female": 45,
        "refugeemale": 13,
        "refugeefemale": 13,
        "total": 110


    }, {
        "category": "Killa Saifullah",
        "male": 25,
        "female": 45,
        "refugeemale": 15,
        "refugeefemale": 15,
        "total": 85

    }, {
        "category": "Sherani",
        "male": 32,
        "female": 5,
        "refugeemale": 13,
        "refugeefemale": 13,
        "total": 50

    }, {
        "category": "Chagai",
        "male": 15,
        "female": 35,
        "refugeemale": 15,
        "refugeefemale": 15,
        "total": 65

    },
    {
        "category": "Nushki",
        "male": 72,
        "female": 13,
        "refugeemale": 25,
        "refugeefemale": 25,
        "total": 110

    },
    {
        "category": "Pishin",
        "male": 32,
        "female": 24,
        "refugeemale": 34,
        "refugeefemale": 34,
        "total": 90

    },
    {
        "category": "Zhob",
        "male": 53,
        "female": 55,
        "refugeemale": 22,
        "refugeefemale": 22,
        "total": 130

    },
    {
        "category": "Mastung",
        "male": 21,
        "female": 65,
        "refugeemale": 44,
        "refugeefemale": 44,
        "total": 130

    },
    {
        "category": "Quetta",
        "male": 5,
        "female": 5,
        "refugeemale": 9,
        "refugeefemale": 9,
        "total": 19

    }]


    var jobj = [
    @{
        foreach (var m in TBBarData)
        {
                                    <text>{
                                            'category': '@m.District',
                                            'male': @m.Male,
                                            'female': @m.Female,
                                            'refugeemale': @m.RefugeeMale,
                                            'refugeefemale': @m.RefugeeFemale,
                                            'total': @m.Total
                                        }, </text>
        }
    }
    ];


    function rerendercbt(data, button, whichChart) {
    var newData = data
    console.log("Data: ", data)
    console.log("Button: ", button)
    console.log("WhichChart: ", whichChart)

    if (button == 1) {
    document.getElementById("title").innerHTML = "Total Beneficiaries"

    var t = document.getElementById("totaltable");
    if (t.style.display === "none") {
    t.style.display = "block";
    }

                        var htsF = document.getElementById("htsFulltable");
                    if (htsF.style.display === "block") {
                        htsF.style.display = "none";
                    }

    var x = document.getElementById("liptable");
    if (x.style.display === "block") {
    x.style.display = "none";
    }
            var lipbifurtitle = document.getElementById("lipbifurtitle");
            if (lipbifurtitle.style.display === "block") {
                lipbifurtitle.style.display = "none";
            }

            var lipbifurtable = document.getElementById("lipbifurtable");
            if (lipbifurtable.style.display === "block") {
                lipbifurtable.style.display = "none";
            }
            var lipbifurtable2 = document.getElementById("lipbifurtable2");
            if (lipbifurtable2.style.display === "block") {
                lipbifurtable2.style.display = "none";
            }

    var y = document.getElementById("bsftable");
    if (y.style.display === "block") {
    y.style.display = "none";
    }

            var htitle = document.getElementById("htstitle");
            if (htitle.style.display === "block") {               
                htitle.style.display = "none";
            }
            var hts = document.getElementById("htstable");
            if (hts.style.display === "block") {
                hts.style.display = "none";
            }

    var y1 = document.getElementById("cbttable");
    if (y1.style.display === "block") {
    y1.style.display = "none";
    }
            var y2 = document.getElementById("cicigtitle");
            if (y2.style.display === "block") {
                y2.style.display = "none";
            }
            var y3 = document.getElementById("cicigtable");
            if (y3.style.display === "block") {
                y3.style.display = "none";
            }
            var y4 = document.getElementById("edptable");
            if (y4.style.display === "block") {
                y4.style.display = "none";
            }
            var y5 = document.getElementById("chartdivedp");
            if (y5.style.display === "block") {
                y5.style.display = "none";
            }
            var y6 = document.getElementById("tvttable");
            if (y6.style.display === "block") {
                y6.style.display = "none";
            }

    var a = document.getElementById("labeltablelip");
    if (a.style.display === "none") {
    a.style.display = "block";
    }
            var aa = document.getElementById("labeltablehts");
            if (aa.style.display === "block") {
                aa.style.display = "none";
            }

    var b = document.getElementById("labeltablebsf");
    if (b.style.display === "block") {
    b.style.display = "none";
    }
    var b1 = document.getElementById("labeltablecbt");
    if (b1.style.display === "block") {
    b1.style.display = "none";
    }

    var xx = document.getElementById("chartdiv");
    if (xx.style.display === "none") {
    xx.style.display = "block";
    }

    var yy = document.getElementById("chartdiv2");
    if (yy.style.display === "block") {
    yy.style.display = "none";
    }

    var z1 = document.getElementById("chartdivbsf1");
    if (z1.style.display === "block") {
    z1.style.display = "none";
    }
            var z4 = document.getElementById("chartdivbsfline");
            if (z4.style.display === "block") {
                z4.style.display = "none";
            }
                        var htschart = document.getElementById("chartdivhts");
                    if (htschart.style.display === "block") {
                        htschart.style.display = "none";
                    }

    var z2 = document.getElementById("chartdivbsf2");
    if (z2.style.display === "block") {
    z2.style.display = "none";
    }



    if (root6) {
    root6.dispose()
    }
    if (root11) {
    root11.dispose()
    }
    }

    am5.ready(function () {

    // Create root6 element
    // https://www.amcharts.com/docs/v5/getting-started/#Root_element
    root14 = am5.Root.new("chartdivcbt2");

    // Set themes
    // https://www.amcharts.com/docs/v5/concepts/themes/
    root14.setThemes([
    am5themes_Animated.new(root14)
    ]);

    // Create chart6
    // https://www.amcharts.com/docs/v5/charts/xy-chart6/
    var chart14 = root14.container.children.push(am5xy.XYChart.new(root14, {
    panX: false,
    panY: false,
    wheelX: "panX",
    wheelY: "zoomX",
    layout: root14.verticalLayout

    }));            

    /***
    * ci 1
    * ci 2
    * cig 1
    * cig 2
    * total
    */
    chart14.get("colors").set("colors", [
    am5.color(0x68A7AD),
    am5.color(0x0B666A),
    am5.color(0x7A9D54),
    am5.color(0x6892D5),
    am5.color(0x394A6D)
    ]);

    chart14.children.unshift(am5.Label.new(root14, {
    text: "Total Number Of Members (CI/CIGs)",
    fontSize: 20,
    fontWeight: "500",
    fill: chart14.get("colors").getIndex(1),
    textAlign: "center",
    //x: am5.percent(50),
    centerX: am5.percent(-5),
    paddingTop: 0,
    paddingBottom: 30
    }));


    // Create axes
    // https://www.amcharts.com/docs/v5/charts/xy-chart14/axes/
    var yRenderer = am5xy.AxisRendererY.new(root14, {
    cellStartLocation: 0.1,
    cellEndLocation: 0.9
    });

    var yAxis = chart14.yAxes.push(am5xy.CategoryAxis.new(root14, {
    categoryField: "category",
    renderer: yRenderer,
    tooltip: am5.Tooltip.new(root14, {})
    }));

    yRenderer.grid.template.setAll({
    location: 1
    })

    yAxis.data.setAll(newData);

    var xAxis = chart14.xAxes.push(am5xy.ValueAxis.new(root14, {
    min: 0,
    renderer: am5xy.AxisRendererX.new(root14, {
    strokeOpacity: 0.1
    })
    }));

    // Add legend
    // https://www.amcharts.com/docs/v5/charts/xy-chart14/legend-xy-series/
    var legend = chart14.children.push(am5.Legend.new(root14, {
    centerX: am5.p50,
    x: am5.p50
    }));


    // Add series
    // https://www.amcharts.com/docs/v5/charts/xy-chart14/series/
    function makeSeries(name, fieldName, stacked, hidden) {
    var series = chart14.series.push(am5xy.ColumnSeries.new(root14, {
    stacked: stacked,
    name: name,
    xAxis: xAxis,
    yAxis: yAxis,
    valueXField: fieldName,
    categoryYField: "category",
    clickTarget: "none"
    //legendLabelText: "Series: {name}",
    //legendRangeLabelText: "Series: {name}"
    }));

    if (name.includes("CI")) {
    console.log("CI")
    series.columns.template.setAll({
    tooltipText: "Female, {categoryY}:{valueX}",
    width: am5.percent(90),
    tooltipY: am5.percent(10)
    });
    }
    else if (name.includes("CIG")) {
    console.log("CIG")
    series.columns.template.setAll({
    tooltipText: "Female, {categoryY}:{valueX}",
    width: am5.percent(90),
    tooltipY: am5.percent(10)
    });
    }
    else {
    series.columns.template.setAll({
    tooltipText: "{name}, {categoryY}:{valueX}",
    width: am5.percent(90),
    tooltipY: am5.percent(10)
    });
    }


    series.data.setAll(newData);

    // Make stuff animate on load
    // https://www.amcharts.com/docs/v5/concepts/animations/
    // series.appear();

    series.bullets.push(function () {
    return am5.Bullet.new(root14, {
    locationY: 0.5,
    sprite: am5.Label.new(root14, {
    text: "{valueX}",
    fill: root14.interfaceColors.get("alternativeText"),
    centerY: am5.percent(50),
    centerX: am5.percent(50),
    populateText: true
    })
    });
    });



    legend.itemContainers.template.events.on("click", function (item) {

    console.log("item", item.target)
    var right = item.target._localBounds.right

    console.log("right: ", right)
    console.log("Includes: ", item.target.uid)
    // item: 100, 122, 144, 166
    // series: 85, 107, 129, 151
    var series1 = chart14.series.getIndex(0);
    var series2 = chart14.series.getIndex(1);
    var series3 = chart14.series.getIndex(2);
    var series4 = chart14.series.getIndex(3);

    //var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
    //var boundsInit = [122.75] //122.75
    //var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
    //var boundsTB = [207.3203125, 102.1640625]//102.1640625
    //var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
    //var boundsLIP = [184.8203125]//122.75
    //var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
    //var boundsCBT = [152.4765625, 113.140625]//113.140625
    //var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
    //var boundsEBP = [121.6328125, 121.6328125]//121.6328125

    //ANDROID: 173.04762268066406 486, 135.42856979370117 528, 113.28571510314941 549

    var listInit = [100, 567, 1034, 1501, 1968, 336, 395, 1005]
    var boundsInit = [122.75, 116.234375]//

    var listTB = [122, 589, 1056, 1523, 1990, 358, 417, 1027]
                    var boundsTB = [207.3203125, 102.1640625, 184.94775390625, 99.50830078125, 173.04762268066406]//

    var listLIP = [144, 611, 1078, 1545, 2012, 380, 439, 1049]
    var boundsLIP = [184.8203125, 166.66650390625]//

    var listCBT = [166, 633, 1100, 1567, 2034, 402, 461, 1071]
                    var boundsCBT = [152.4765625, 113.140625, 140.38720703125, 108.4267578125, 135.42856979370117]//

    var listEBP = [188, 655, 1122, 1589, 2056, 424, 483, 1093]
                    var boundsEBP = [121.6328125, 115.32666015625, 113.28571510314941]//

                    //173.04762268066406,

    if (/*listInit.includes(item.target.uid) ||*/ boundsInit.includes(right)) {
    console.log("init")
    if (series1.get("visible")) {
    console.log("Visible FIRST")
    //series1.hide();
    series2.hide();
    }
    else {
    console.log("Hidden", series1.isHidden())
    if (series1.isHidden()) {
    // series1.show();
    }
    series2.show()
    }
    //series1.show()

    series3.hide()
    series4.hide()
    }

    if (/*listTB.includes(item.target.uid) || */boundsTB.includes(right)) {
    console.log("TB")
    if (series2.get("visible")) {
    console.log("Visible")
    //series1.hide();
    series1.hide();
    }
    else {
    console.log("Hidden", series2.isHidden())
    if (series2.isHidden()) {
    // series1.show();
    }
    series1.show()
    }
    //series1.show()

    series3.hide()
    series4.hide()
    }

    if (/*listLIP.includes(item.target.uid) || */boundsLIP.includes(right)) {
    console.log("LIP")
    if (series3.get("visible")) {
    console.log("Visible")
    //series1.hide();
    series4.hide();
    }
    else {
    console.log("Hidden", series3.isHidden())
    if (series3.isHidden()) {
    // series1.show();
    }
    series4.show()
    }
    //series1.show()

    series1.hide()
    series2.hide()
    }

    if (/*listCBT.includes(item.target.uid) ||*/ boundsCBT.includes(right)) {
    console.log("CBT")
    if (series4.get("visible")) {
    console.log("Visible")
    //series1.hide();
    series3.hide();
    }
    else {
    console.log("Hidden", series4.isHidden())
    if (series4.isHidden()) {
    // series1.show();
    }
    series3.show()
    }
    //series1.show()

    series1.hide()
    series2.hide()
    }

    });

    legend.data.push(series);


    allLegends = legend.allChildren()
    console.log(" All LEGEND: ", allLegends)
    allLegends[0].hide()
    if (allLegends[2]) {
    allLegends[2].hide()
    }

    if (hidden) {
    series.hide();
    }
    else {
    series.appear();
    }
    }

    //if (whichChart == "cbt") {
    makeSeries("Male", "male", true, true);
    makeSeries("CI", "female", true, true);
    makeSeries("Male", "refugeemale", true, false);
    makeSeries("CIG", "refugeefemale", true, false);
    makeSeries("Total", "total", false, false);

    var a = document.getElementById("labeltablelip");
    if (a.style.display === "block") {
    a.style.display = "none";
    }
            var aa = document.getElementById("labeltablehts");
            if (aa.style.display === "block") {
                aa.style.display = "none";
            }
    var b = document.getElementById("labeltablebsf");
    if (b.style.display === "block") {
    b.style.display = "none";
    }
    var c = document.getElementById("labeltablecbt");
    if (c.style.display === "none") {
    c.style.display = "block";
    }



    //}
    //else {
    //    makeSeries("Male", "male", true, true);
    //    makeSeries("Host Community", "female", true, true)
    //    makeSeries("Refugee Male", "refugeemale", true, false)
    //    makeSeries("Refugees", "refugeefemale", true, false)
    //    makeSeries("Total", "total", false, false)
    //}
    //makeSeries("Europe", "europe", false);
    //makeSeries("North America", "namerica", true);
    //makeSeries("Asia", "asia", false);
    //makeSeries("Latin America", "lamerica", true);
    //makeSeries("Middle East", "meast", true);
    //makeSeries("Africa", "africa", true);


    // Make stuff animate on load
    // https://www.amcharts.com/docs/v5/concepts/animations/
    chart14.appear(1000, 100);

    }); // end am5.ready()


    }


</script>

@*               CBT
        CBT MAIN CHART CI/CIGs ENDS...........
*@


@*      GUAGE CHART TOTAL PROJECT PROGRESS
             GUAGECHART START
*@

<!-- Chart code -->
<script>
    am4core.ready(function () {

    // Themes begin
    am4core.useTheme(am4themes_animated);
    // Themes end

    // create chart
    var chart7 = am4core.create("guagechartdiv", am4charts.GaugeChart);
    chart7.innerRadius = am4core.percent(82);

    /**
    * Normal axis
    */

    var axis = chart7.xAxes.push(new am4charts.ValueAxis());
    axis.min = 0;
    axis.max = 100;
    axis.strictMinMax = true;
    axis.renderer.radius = am4core.percent(80);
    axis.renderer.inside = true;
    axis.renderer.line.strokeOpacity = 1;
    axis.renderer.ticks.template.disabled = false
    axis.renderer.ticks.template.strokeOpacity = 1;
    axis.renderer.ticks.template.length = 10;
    axis.renderer.grid.template.disabled = true;
    axis.renderer.labels.template.radius = 40;
    axis.renderer.labels.template.adapter.add("text", function (text) {
    return text + "%";
    })

    /**
    * Axis for ranges
    */

    var colorSet = new am4core.ColorSet();

    var axis2 = chart7.xAxes.push(new am4charts.ValueAxis());
    axis2.min = 0;
    axis2.max = 100;
    axis2.strictMinMax = true;
    axis2.renderer.labels.template.disabled = true;
    axis2.renderer.ticks.template.disabled = true;
    axis2.renderer.grid.template.disabled = true;

    var range0 = axis2.axisRanges.create();
    range0.value = 0;
    range0.endValue = 50;
    range0.axisFill.fillOpacity = 1;
    range0.axisFill.fill = colorSet.getIndex(0);

    var range1 = axis2.axisRanges.create();
    range1.value = 50;
    range1.endValue = 100;
    range1.axisFill.fillOpacity = 1;
    range1.axisFill.fill = colorSet.getIndex(2);

    /**
    * Label
    */

    var label = chart7.radarContainer.createChild(am4core.Label);
    label.isMeasured = true;
    label.fontSize = 45;
    //label.x = am4core.percent(50);
    //label.y = am4core.percent(100);
    label.horizontalCenter = "middle";
    //label.verticalCenter = "bottom";
    //label.fill = colorSet.getIndex(2);
    label.text = "50%";

    // Add chart title
    var title = chart7.titles.create();
    title.text = "Project Progress";
    title.fontSize = 25;
    title.marginBottom = -50;
    title.fill = colorSet.getIndex(2);


    /**
    * Hand
    */

    var hand = chart7.hands.push(new am4charts.ClockHand());
    hand.axis = axis2;
    hand.innerRadius = am4core.percent(20);
    hand.startWidth = 10;
    hand.pin.disabled = true;
    hand.value = 50;

    hand.events.on("propertychanged", function (ev) {
    range0.endValue = ev.target.value;
    range1.value = ev.target.value;
    label.text = axis2.positionToValue(hand.currentPosition).toFixed(0);
    axis2.invalidate();
    });
    
    setInterval(function () {
    var value = @TProgress;
    var animation = new am4core.Animation(hand, {
    property: "value",
    to: value
    }, 1000, am4core.ease.cubicOut).start();
    }, 2000);

    }); // end am4core.ready()
</script>


@*          GUAGE CHART TOTAL PROJECT PROGRESS
                    GUAGE CHART ENDs.............
*@

@*              OTHER INTERVENTION CHART
                        STARTS...............
*@

<!-- Chart code -->
<script>
    am5.ready(function () {

    // Create root element
    // https://www.amcharts.com/docs/v5/getting-started/#Root_element
    var root7 = am5.Root.new("solidguage");

    // Set themes
    // https://www.amcharts.com/docs/v5/concepts/themes/
    root7.setThemes([
    am5themes_Animated.new(root7)
    ]);

    // Create chart
    // https://www.amcharts.com/docs/v5/charts/radar-chart/
    var chart8 = root7.container.children.push(am5radar.RadarChart.new(root7, {
    panX: false,
    panY: false,
    wheelX: "panX",
    wheelY: "zoomX",
    y: am5.percent(-10),
    radius: am5.percent(70),
    innerRadius: am5.percent(20),
    startAngle: -90,
    endAngle: 180
    }));

    //chart8.children.unshift(am5.Label.new(root7, {
    //text: "Other Interventions",
    //fontSize: 25,
    //fontWeight: "500",
    //fill: chart8.get("colors").getIndex(1),
    ////textAlign: "center",
    //x: am5.percent(100),
    //y: am5.percent(0),
    //centerX: am5.percent(120)   
    //}));


    // Data
    var data = [{
    category: "Trained LF",
    value: 80,
    full: 100,
    columnSettings: {
    fill: chart8.get("colors").getIndex(0)
    }
    }, {
    category: "Trained TRP",
    value: 35,
    full: 100,
    columnSettings: {
    fill: chart8.get("colors").getIndex(1)
    }
    }, {
    category: "Individual Businesses",
    value: 92,
    full: 100,
    columnSettings: {
    fill: chart8.get("colors").getIndex(2)
    }
    }, {
    category: "Value Chain Studies",
    value: (3 / 10) * 100,
    full: 100,
    columnSettings: {
    fill: chart8.get("colors").getIndex(3)
    }
    }];

    // Add cursor
    // https://www.amchart8s.com/docs/v5/chart8s/radar-chart8/#Cursor
    var cursor = chart8.set("cursor", am5radar.RadarCursor.new(root7, {
    behavior: "zoomX"
    }));

    cursor.lineY.set("visible", false);

    // Create axes and their renderers
    // https://www.amchart8s.com/docs/v5/chart8s/radar-chart8/#Adding_axes
    var xRenderer = am5radar.AxisRendererCircular.new(root7, {
    //minGridDistance: 50
    });

    xRenderer.labels.template.setAll({
    radius: 10
    });

    xRenderer.grid.template.setAll({
    forceHidden: true
    });

    var xAxis = chart8.xAxes.push(am5xy.ValueAxis.new(root7, {
    renderer: xRenderer,
    min: 0,
    max: 100,
    strictMinMax: true,
    numberFormat: "#'%'",
    tooltip: am5.Tooltip.new(root7, {})
    }));


    var yRenderer = am5radar.AxisRendererRadial.new(root7, {
    minGridDistance: 20
    });

    yRenderer.labels.template.setAll({
    centerX: am5.p100,
    fontWeight: "500",
    fontSize: 18,
    templateField: "columnSettings"
    });

    yRenderer.grid.template.setAll({
    forceHidden: true
    });

    var yAxis = chart8.yAxes.push(am5xy.CategoryAxis.new(root7, {
    categoryField: "category",
    renderer: yRenderer
    }));

    yAxis.data.setAll(data);


    // Create series
    // https://www.amchart8s.com/docs/v5/chart8s/radar-chart8/#Adding_series
    var series1 = chart8.series.push(am5radar.RadarColumnSeries.new(root7, {
    xAxis: xAxis,
    yAxis: yAxis,
    clustered: false,
    valueXField: "full",
    categoryYField: "category",
    fill: root7.interfaceColors.get("alternativeBackground")
    }));

    series1.columns.template.setAll({
    width: am5.p100,
    fillOpacity: 0.08,
    strokeOpacity: 0,
    cornerRadius: 20
    });

    series1.data.setAll(data);


    var series2 = chart8.series.push(am5radar.RadarColumnSeries.new(root7, {
    xAxis: xAxis,
    yAxis: yAxis,
    clustered: false,
    valueXField: "value",
    categoryYField: "category"
    }));

    series2.columns.template.setAll({
    width: am5.p100,
    strokeOpacity: 0,
    tooltipText: "{category}: {valueX}%",
    cornerRadius: 20,
    templateField: "columnSettings"
    });

    series2.data.setAll(data);

    // Animate chart8 and series in
    // https://www.amchart8s.com/docs/v5/concepts/animations/#Initial_animation
    series1.appear(1000);
    series2.appear(1000);
    chart8.appear(1000, 100);

    }); // end am5.ready()
</script>


@*              OTHER INTERVENTION CHART
                        ENDS...............
*@

<!-- HTML -->
<div id="main">

@*    <div class="progress" style="height: 30px; margin-bottom: 5px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%;  display: flex; align-items: center; justify-content: center; height: 8vh;">
            <p style="font-size:15px;">Project Progress @TProgress %</p>
        </div>
    </div>*@

        <div class="progress" style="height: 30px; margin-bottom:10px;">
        <div class="progress-bar progress-bar-striped animated progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="overflow:visible; width: 75%;  display: flex;  justify-content: center; height: 45px;">
            <p style="font-size:15px;">Project Progress @TProgress %</p>
        </div>
    </div>

    <div id="mainDiv">
        <div id="topRow">
            <div class="ib" id="chartdivPerLIP" style="cursor: pointer;"></div>
            @*<div class="vr" style="height: 100px; width:1px; background-color:purple"></div>*@
            <div class="ib" id="chartdivPerBSF" style="cursor: pointer;"></div>
            <div class="ib" id="chartdivPerTunnels" style="cursor: pointer;"></div>
            <div class="ib" id="chartdivPerCBT" style="cursor: pointer;"></div>
            <div class="ib" id="chartdivPerEBP2" style="cursor: pointer;"></div>
            <div class="ib" id="chartdivPerEBP" style="cursor: pointer;"></div>
        </div>       

        <div class="container-fluid" @*style="border-left:2px solid black; border-right: 2px solid black; border-bottom: 2px solid black;"*@>
            
            <button class="button-10" role="button" onclick="rerender(tbBarData, 1)" style="margin-top: 15px;">Total Beneficieries</button>

            <p id="title" style="font-size:25px; font-weight:500; color:#6794DC">Total Beneficiaries</p>

            <div class="table-container" id="IntertableI" style="display: block; width: 100%; overflow-x: auto;">
                <table class="table" style="border-collapse: collapse; width: 100%; background-color:white; border: 2px solid black;">
                    <thead class="tableBorder">
                    <tr class="tableBorder">                            
                            <th class="tableBorder" rowspan="2" style="text-align: center; vertical-align: middle; background-color:#67b7dc; font-size:16px; font-weight:bolder; color:white;">Interventions</th>
                            <th class="tableBorder" colspan="2" style="text-align: center; vertical-align: middle; font-size:16px">LIP</th>
                            <th class="tableBorder" colspan="2" style="text-align: center; vertical-align: middle; font-size:16px">BSF</th>
                            <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">HTS</th>
                            <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">CI/CIGs</th>
                            <th class="tableBorder" colspan="2" style="text-align: center; vertical-align: middle; font-size:16px">Community Training Events</th>
                            <th class="tableBorder" colspan="2" style="text-align: center; vertical-align: middle; font-size:16px">TVT</th>
                            <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">EDP</th>
                    </tr>
                    <tr class="tableBorder">                        
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">Refugee</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">Host</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">Gov</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">Private</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px"></th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px"></th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">Male</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">Female</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">Refugee</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">Host</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px"></th>
                    </tr>
                </thead>
                    <tbody class="tableBorder">
                    <tr class="tableBorder">
                        <th class="tableBorder" style="background-color:#67b7dc; font-size:16px; font-weight:bolder; color:white;">
                            Beneficiaries
                        </th>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">@benefRFLIP</td>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">@benefHOSTLIP</td>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">@benefBSF</td>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">0</td>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">@benefHTS</td>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">@benefCICIGFormed</td>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">@maleCBTT</td>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">@femaleCBTT</td>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">2500</td>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">0</td>
                        <td class="tableBorder" style="text-align: center; vertical-align: middle;">0</td>
                    </tr>
                    <tr class="tableBorder">
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; background-color:#67b7dc; font-size:16px; font-weight:bolder; color:white;">Total</th>
                        <th class="tableBorder" colspan="2" style="text-align: center; vertical-align: middle; font-size:16px">@{var tLIP = benefRFLIP + benefHOSTLIP;} @tLIP</th>
                        <th class="tableBorder" colspan="2" style="text-align: center; vertical-align: middle; font-size:16px">@benefBSF</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">@benefHTS</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">@benefCICIGFormed</th>
                        <th class="tableBorder" colspan="2" style="text-align: center; vertical-align: middle; font-size:16px">
                            @grandT
                        </th>
                        <th class="tableBorder" colspan="2" style="text-align: center; vertical-align: middle; font-size:16px">2500</th>
                        <th class="tableBorder" style="text-align: center; vertical-align: middle; font-size:16px">0</th>
                    </tr>
                </tbody>
            </table>
            </div>
            <div class="row" style="display: flex; justify-content: space-between; align-items: flex-end;">
                <div class="col-xl-6">
                    <!-- HTML !-->
                    @{
                        var maleT = 0;
                        var femaleT = 0;
                        var rmf = 0;
                        var refugeeT = 0;
                        var rmT = 0;
                        var rfT = 0;
                        var totalT = 0;

                        var maleTBT = 0;
                        var femaleTBT = 0;
                        var refugeeMaleTBT = 0;
                        var refugeeFemaleTBT = 0;
                        var refugeeTBT = 0;
                        var rTBmf = 0;
                        var totalTBT = 0;

                        var maleTVT = 0;
                        var femaleTVT = 0;
                        var refugeeTVT = 0;
                        var rtvtmf = 0;
                        var totalTVT = 0;

                        var maleCI = 0;
                        var femaleCI = 0;
                        var maleCIG = 0;
                        var femaleCIG = 0;
                        var totalCICIG = 0;
                        var tmCICIG = 0;
                        var tfCICIG = 0;

                        var govT = 0;
                        var priT = 0;

                        var maleBigHts = 0;
                        var femaleBigHts = 0;
                        var maleSmallHts = 0;
                        var femaleSmallHts = 0;
                        var totalFHts = 0;

                        var GoatAndSheepPackage = 0;
                        var SewingAndPekoMachine = 0;
                        var TuckShop = 0;
                        var SunBasedFruitDrying = 0;
                        var BackyardKitchenGardening = 0;
                        var IDOPoultry = 0;
                        var TotalHostCount = 0;
                        var TotalRefCount = 0;

                        var maleHTST = 0;
                        var femaleHTST = 0;
                        var totalHTST = 0;
                        
                    }                   

                    <table id="totaltableI" class="table table-bordered" style="background-color:white; display:block">
                        <thead>
                            @{
                                var totalFemale = 0; var tf = 0;                              
                            }

                            @foreach (var obj in totalBenf)
                            {
                                maleT += obj.Male;
                                femaleT += obj.Female;
                                tf = obj.Female + obj.RefugeeFemale;
                                totalFemale += tf;
                                rmf = obj.RefugeeMale + obj.RefugeeFemale;
                                refugeeT += rmf;
                                rmT += obj.RefugeeMale;
                                rfT += obj.RefugeeFemale;
                                totalT += obj.Total;
                               
                            }
                            <tr>
                                <th style="text-align: center; vertical-align: middle; width:100%">Activities</th>
                                <th>Achieved</th>
                                <th style="text-align: center;">Target</th>
                            </tr>                        
                        </thead>
                        <tbody>
                            <tr>
                                <th>Total Beneficiaries</th>                                
                                <td>@totalT
                                </td>
                                <td>56610</td>
                            </tr>
                            <tr>
                                <th>No. Direct Female Beneficiaries</th>                                
                                <td>@totalFemale
                                </td>
                                <td>11142</td>
                            </tr>
                            <tr>
                                <th>Total Refugees</th>                               
                                <td>@refugeeT
                                </td>
                                <td>8615</td>
                            </tr>                                
                        </tbody>
                    </table>
                    <table id="liptableI" class="table table-bordered" style="background-color:white; display:none">
                        <thead>
                            @{
                                var totalLipFemale = 0; var tlipf = 0;
                            }

                            @foreach (var obj in TBBarData)
                            {
                                maleTBT += obj.Male;
                                femaleTBT += obj.Female;
                                refugeeMaleTBT += obj.RefugeeMale;
                                refugeeFemaleTBT += obj.RefugeeFemale;

                                tlipf = obj.Female + obj.RefugeeFemale;
                                totalLipFemale += tlipf;
                                rTBmf = obj.RefugeeMale + obj.RefugeeFemale;
                                refugeeTBT += rTBmf;
                                totalTBT += obj.Total;
                            }
                            <tr>
                                <th style="text-align: center; vertical-align: middle; width:100%">Activities</th>
                                <th>Achieved</th>
                                <th style="text-align: center">Target</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th>
                                    Total Beneficiaries
                                </th>

                                <td>
                                    @totalTBT
                                </td>
                                <td>4500</td>
                            </tr>
                            <tr>
                                <th>
                                    No. Direct Female Beneficiaries
                                </th>

                                <td>
                                    @totalLipFemale
                                </td>
                                <td>4000</td>
                            </tr>
                            <tr>
                                <th>
                                    Total Refugees
                                </th>

                                <td>
                                    @refugeeTBT
                                </td>
                                <td>4000</td>
                            </tr>
                        </tbody>
                    </table>
                    <table id="bsftableI" class="table table-bordered" style="background-color:white; display:none">
                        <thead>
                            @{
                                var totalBsf = 0; var tbsf = 0;
                            }

                            @foreach (var obj in bsfList)
                            {
                                govT += obj.Government;
                                priT += obj.Private;
                                tbsf = obj.Government + obj.Private;                                
                            }
                            <tr>
                                <th  style="text-align: center; vertical-align: middle; width:100%">Activities</th>
                                <th>Achieved</th>
                                <th style="text-align: center">Target</th>
                            </tr>

                        </thead>
                        <tbody>
                            <tr>
                                <th>
                                    Total BSF (Government)
                                </th>

                                <td>
                                    @govT
                                </td>
                                <td rowspan="2" style="text-align: center; vertical-align: middle;">85</td>
                            </tr>
                            <tr>
                                <th>
                                    Total BSF (Private)
                                </th>

                                <td>
                                    @priT                              
                                </td>
                            </tr>
                            <tr>
                                <th>
                                    Grand Total
                                </th>

                                <td>
                                    @{
                                        totalBsf = govT + priT;
                                    }
                                    @totalBsf
                                </td>
                                <td rowspan="2" style="text-align: center; vertical-align: middle;">85</td>
                            </tr>
                        </tbody>
                    </table>
                    <table id="htstableI" class="table table-bordered" style="background-color:white; display:none">
                        <thead>                        
                            @foreach (var obj in htsList)
                            {
                                maleHTST += obj.Male;
                                femaleHTST += obj.Female;
                                totalHTST += obj.Total;
                            }
                            <tr>
                                <th style="text-align: center; vertical-align: middle; width:100%">Activities</th>
                                <th>Achieved</th>
                                <th style="text-align: center">Target</th>
                            </tr>

                        </thead>
                        <tbody>
                            <tr>
                                <th>
                                    Tunnels For Female
                                </th>

                                <td>
                                    @femaleHTST
                                </td>
                                <td rowspan="2" style="text-align: center; vertical-align: middle;">174</td>
                            </tr>
                            <tr>
                                <th>
                                    Tunnels For Male
                                </th>

                                <td>
                                    @maleHTST
                                </td>
                            </tr>
                            <tr>
                                <th>
                                    Grand Total
                                </th>

                                <td>
                                    @totalHTST
                                </td>
                                <td rowspan="2" style="text-align: center; vertical-align: middle;">174</td>
                            </tr>
                        </tbody>
                    </table>
                    <table id="cbttableI" class="table table-bordered" style="background-color:white; display:none">
                        <thead>
                            @{
                                var totalMFCI = 0; var tmfCI = 0;
                                var totalMFCIG = 0; var tmfCIG = 0;
                                var totalMCICIG = 0;
                                var totalFCICIG = 0;
                                var totalCI = 0;                                
                            }

                            @foreach (var obj in cicigList)
                            {
                                maleCI += obj.CIMaleCount;
                                femaleCI += obj.CIFemaleCount;
                                maleCIG += obj.CIGMaleCount;
                                femaleCIG += obj.CIGFemaleCount;
                                totalCICIG = obj.TotalCount;

                                tmfCI = obj.CIMaleCount + obj.CIFemaleCount;
                                totalMFCI += tmfCI;
                                tmfCIG = obj.CIGMaleCount + obj.CIGFemaleCount;
                                totalMFCIG += tmfCIG;

                                tmCICIG = obj.CIMaleCount + obj.CIGMaleCount;
                                totalMCICIG += tmCICIG;
                                tfCICIG = obj.CIFemaleCount + obj.CIGFemaleCount;
                                totalFCICIG += tfCICIG;


                                @*tf = obj.Female + obj.RefugeeFemale;
                                totalFemale += tf;
                                rmf = obj.RefugeeMale + obj.RefugeeFemale;
                                refugeeT += rmf;
                                totalT += obj.Total;*@
                            }
                            <tr>
                                <th>Gender</th>
                                <th>CI/CIGs Achieved</th>                                                              
                                <th style="text-align: center; vertical-align: middle;">Target</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th>
                                    Male
                                </th>
                                <td>
                                    @totalMCICIG
                                </td>                                      
                                <td style="text-align: center; vertical-align: middle;">510</td>
                            </tr>
                            <tr>
                                <th>
                                   Female
                                </th>
                                <td>
                                    @totalFCICIG
                                </td>
                                <td style="text-align: center; vertical-align: middle;">
                                    340
                                </td>                                      
                            </tr>     
                            <tr>
                                <th>
                                   Total
                                </th>
                                <td>
                                    @{totalCI = totalFCICIG + totalMCICIG;}
                                    @totalCI
                                </td>
                                <td style="text-align: center; vertical-align: middle;">
                                    850
                                </td>                                      
                            </tr> 
                        </tbody>
                    </table>
                    <table id="tvttableI" class="table table-bordered" style="background-color:white; display:none">
                        <thead>
                            @{
                                var totalTvtFemale = 0; var ttvtf = 0;
                                var tRefugeeMale = 0; var tRefFemale = 0;
                            }

                            @foreach (var obj in tvtList)
                            {
                                maleTVT += obj.Male;
                                femaleTVT += obj.Female;
                                tRefugeeMale += obj.RefugeeMale;
                                tRefFemale += obj.RefugeeFemale;

                                ttvtf = obj.Female + obj.RefugeeFemale;
                                totalTvtFemale += ttvtf;
                                rtvtmf = obj.RefugeeMale + obj.RefugeeFemale;
                                refugeeTVT += rtvtmf;
                                totalTVT += obj.Total;
                            }
                            <tr>
                                <th style="text-align: center; vertical-align: middle; width:100%">Activities</th>
                                <th>Achieved</th>
                                <th style="text-align: center">Target</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th>
                                    Total Beneficiaries
                                </th>

                                <td>
                                    2500
                                </td>
                                <td>12750</td>
                            </tr>
                            <tr>
                                <th>
                                    No. Direct Female Beneficiaries
                                </th>

                                <td>
                                    500
                                </td>
                                <td>5100</td>
                            </tr>
                            <tr>
                                <th>
                                    Total Refugees
                                </th>

                                <td>
                                    2500
                                </td>
                                <td>2500</td>
                            </tr>                           
                        </tbody>
                    </table>
                    <table id="edptableI" class="table table-bordered" style="background-color:white; display:none">
                        <thead>                            
                            <tr>
                                <th style="text-align: center; vertical-align: middle; width:100%">Activities</th>
                                <th>Achieved</th>
                                <th style="text-align: center">Target</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th>
                                    Total Beneficiaries
                                </th>

                                <td>
                                    0
                                </td>
                                <td>5100</td>
                            </tr>
                            <tr>
                                <th>
                                    No. Direct Female Beneficiaries
                                </th>

                                <td>
                                    0
                                </td>
                                <td>1275</td>
                            </tr>                           
                        </tbody>
                    </table>

                </div>
                <div class="col-xl-6" style="flex: 1;">
                    <div class="table-responsive-sm table-responsive-xl table-responsive-lg">
                        <table class="table" id="labeltablelip" style="display:block;">
                            <thead>
                                <tr>
                                    <th colspan="10">
                                        <p style="font-size:20px; font-weight:500; color:#6794DC">Color Legends</p>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#68A7AD"></div>
                                    </td>
                                    <td>Host Male</td>

                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#7A9D54"></div>
                                    </td>
                                    <td>Refugee Male</td>

                                    <td rowspan="2" style="padding-top: 28px">
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#394A6D"></div>
                                    </td>
                                    <td rowspan="2" style="font-size:15px; padding-top: 30px">Total</td>
                                </tr>
                                <tr>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#0B666A"></div>
                                    </td>
                                    <td>Host Female</td>

                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#6892D5"></div>
                                    </td>
                                    <td>Refugee Female</td>
                                </tr>
                            </tbody>

                        </table>
                        <table class="table" id="labeltablebsf" style="display:none">
                            <thead>                  
                                <tr>
                                    <th colspan="10">
                                        <p style="font-size:20px; font-weight:500; color:#6794DC">Color Legends</p>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#095256"></div>
                                    </td>
                                    <td style="font-size:15px">Government</td>
                                  
                                </tr>
                                <tr>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#087e8c"></div>
                                    </td>
                                    <td>Private</td>
                                </tr>
                            </tbody>

                        </table>
                        <table class="table" id="labeltablehts" style="display:none">
                            <thead>
                                <tr>
                                    <th colspan="10">
                                        <p style="font-size:20px; font-weight:500; color:#6794DC">Color Legends</p>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#095256"></div>
                                    </td>
                                    <td style="font-size:15px">Male</td>

                                </tr>
                                <tr>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#087e8c"></div>
                                    </td>
                                    <td>Female</td>
                                </tr>
                            </tbody>

                        </table>                        
                        <table class="table" id="labeltablecbt" style="display:none">
                            <thead>
                                <tr>
                                    <th colspan="10">
                                        <p style="font-size:20px; font-weight:500; color:#6794DC">Color Legends</p>
                                    </th>
                                </tr>
                            </thead>                            
                            <tbody>
                                <tr>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#68A7AD"></div>
                                    </td>
                                    <td>CI Male</td>
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#7A9D54"></div>
                                    </td>
                                    <td>CIG Male</td>
                                    <td rowspan="2" style="padding-top: 28px">
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#394A6D"></div>
                                    </td>
                                    <td rowspan="2" style="font-size:15px; padding-top: 30px">Total</td>
                                </tr>
                                <tr>                                                                                                 
                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#0B666A"></div>
                                    </td>
                                    <td>CI Female</td>

                                    <td>
                                        <div style="height:10px; width:30px; border-radius:2px; margin-top:30%; background-color:#6892D5"></div>
                                    </td>
                                    <td>CIG Female</td>
                                </tr>
                            </tbody>

                        </table>
                    </div>
                </div>
            </div>

            <div class="row">

                <div class="col-xl-5">
                    <table id="totaltable" class="table table-bordered table-striped" style="width:100%; display:block">
                        <thead style="background-color:#67b7dc; color:white">
                            <tr>
                                <th style="text-align: center; vertical-align: middle">
                                    District
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Male
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Female
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Refugees Male
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Refugees Female
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Total
                                </th>
                            </tr>
                        </thead>
                        <tbody>
      
                            @{
                                foreach (var obj in totalBenf)
                                {                                  
                                                            <tr>
                                                                <td width="50%">
                                                                    @obj.District
                                                                </td>
                                                                <td width="50%">
                                                                    @obj.Male
                                                                </td>
                                                                <td width="50%">
                                                                    @obj.Female
                                                                </td>
                                                                <td width="50%">  
                                                                    @obj.RefugeeMale
                                                                </td> 
                                                                <td width="50%">  
                                                                    @obj.RefugeeFemale
                                                                </td>

                                                                <td width="50%">
                                                                    @obj.Total
                                                                </td>
                                                            </tr>
                                }
                                
                                                        <tr style="background-color:#67b7dc">
                                                            <td style="font-weight:bolder; color:white;">Total</td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @maleT
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @femaleT
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @rmT
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @rfT
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @totalT
                                                            </td>
                                                        </tr>
                            }

                        </tbody>
                    </table>
                    <table id="liptable" class="table table-bordered table-striped" style="width:100%; display:none">
                        <thead style="text-align: center; vertical-align: 10%; background-color:#67b7dc; color:white">
                            <tr>
                                <th style="text-align: center; vertical-align: middle">
                                    District
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Male
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Female
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Refugees Male
                                </th>  
                                <th style="text-align: center; vertical-align: middle">
                                    Refugees Female
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Total
                                </th>
                            </tr>                        
                        </thead>
                        <tbody>              
                            
                            @{
                                foreach (var obj in TBBarData)
                                {                                   
                                                            <tr>
                                                                <td width="50%">
                                                                    @obj.District
                                                                </td>
                                                                <td width="50%">
                                                                    @obj.Male
                                                                </td>
                                                                <td width="50%">
                                                                    @obj.Female
                                                                </td>
                                                                <td width="50%"> 
                                                                    @obj.RefugeeMale
                                                                </td>  
                                                                <td width="50%"> 
                                                                    @obj.RefugeeFemale
                                                                </td>

                                                                <td width="50%">
                                                                    @obj.Total
                                                                </td>
                                                            </tr>
                                }
                                                        <tr style="background-color:#67b7dc">
                                                            <td style="font-weight:bolder; color:white;">Total</td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @maleTBT
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @femaleTBT
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">
                                        @refugeeMaleTBT
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">
                                        @refugeeFemaleTBT
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @totalTBT
                                                            </td>
                                                        </tr>
                            }         
                            
                        </tbody>
                    </table>                                    
                    
                    <table id="bsftable" class="table table-bordered table-striped" style="width:100% ; display:none">
                        <thead style="text-align: center; vertical-align: text-top; background-color:#67b7dc; color:white">
                            <tr>
                                <th style="text-align: center; vertical-align: middle">
                                    District
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Governement
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Private
                                </th>
                            </tr>
                        </thead>
                        <tbody>
  
                            @foreach (var obj in bsfList)
                            {      
                                <tr>
                                    <td width="50%">
                                        @obj.District
                                    </td>
                                    <td width="50%">
                                        @obj.Government
                                    </td>
                                    <td width="50%">
                                        @obj.Private
                                    </td>                                    
                                </tr>
                            }
                            <tr style="background-color:#67b7dc">
                                <td style="font-weight:bolder; color:white;">
                                    Total
                                </td>
                                <td style="font-weight:bolder; color:white;">
                                    @govT
                                </td>
                                <td style="font-weight:bolder; color:white;">
                                    @priT
                                </td>
                            </tr>
                        </tbody>
                    </table>                    
                    <table id="cicigtable" class="table table-bordered table-striped" style="width:100%; display:none">
                        <thead style="text-align: center; vertical-align: super; background-color:#67b7dc; color:white">
                            <tr>
                                <th></th>
                                <th style="text-align: center; vertical-align: middle; font-size:18px;" colspan="2">CI</th>
                                <th style="text-align: center; vertical-align: middle; font-size:18px" colspan="2">CIG</th>
                                <th></th>
                            </tr>
                            <tr>
                                <th>
                                    District
                                </th>
                                <th>
                                    Male
                                </th>
                                <th>
                                    Female
                                </th>
                                <th>
                                    Male
                                </th>
                                <th>
                                    Female
                                </th>
                                <th>
                                    Total
                                </th>
                            </tr>
                        </thead>
                        <tbody>

                            @{
                                foreach (var obj in cicigList)
                                {
                                                            <tr>
                                                                <td width="50%">
                                                                    @obj.District
                                                                </td>
                                                                <td width="50%">
                                                                    @obj.CIMaleCount
                                                                </td>
                                                                <td width="50%">
                                                                    @obj.CIFemaleCount
                                                                </td>
                                                                <td width="50%">
                                                                    @obj.CIGMaleCount
                                                                </td>
                                                                <td width="50%">
                                                                    @obj.CIGFemaleCount
                                                                </td>                                        

                                                                <td width="50%">
                                                                    @obj.TotalCount
                                                                </td>
                                                            </tr>
                                }
                                                        <tr style="background-color:#67b7dc">
                                                            <td style="font-weight:bolder; color:white;">Total</td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @maleCI
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @femaleCI
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">
                                                                @maleCIG
                                                            </td> 
                                                            <td style="font-weight:bolder; color:white;">
                                                                @femaleCIG
                                                            </td>
                                                            <td style="font-weight:bolder; color:white;">                                       
                                                                @totalCI
                                                            </td>
                                                        </tr>
                            }

                        </tbody>
                    </table>
                    <table id="tvttable" class="table table-bordered table-striped" style="width:100%; display:none">
                        <thead style="background-color:#67b7dc; color:white">
                            <tr>
                                <th style="text-align: center; vertical-align: middle">
                                    District
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Male
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Female
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Refugees Male
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Refugees Female
                                </th>
                                <th style="text-align: center; vertical-align: middle">
                                    Total
                                </th>
                            </tr>
                        </thead>
                        <tbody>

                            @{
                                foreach (var obj in tvtList)
                                {
                                    <tr>
                                        <td width="50%">
                                            @obj.District
                                        </td>
                                        <td width="50%">
                                            @obj.Male
                                        </td>
                                        <td width="50%">
                                            @obj.Female
                                        </td>
                                        <td width="50%">
                                            @obj.RefugeeMale
                                        </td>
                                        <td width="50%">
                                            @obj.RefugeeFemale
                                        </td>

                                        <td width="50%">
                                            @obj.Total
                                        </td>
                                    </tr>
                                }
                                <tr style="background-color:#67b7dc">
                                    <td style="font-weight:bolder; color:white;">Total</td>
                                    <td style="font-weight:bolder; color:white;">
                                        @maleTVT
                                    </td>
                                    <td style="font-weight:bolder; color:white;">
                                        @femaleTVT
                                    </td>
                                    <td style="font-weight:bolder; color:white;">
                                        @tRefugeeMale
                                    </td>
                                    <td style="font-weight:bolder; color:white;">
                                        @tRefFemale
                                    </td>
                                    <td style="font-weight:bolder; color:white;">
                                        @totalTVT
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>

                </div> 
                               
                <div class="col-xl-7" id="chartdiv" style="display:block"></div>
                <div class="col-xl-7" id="chartdiv2" style="border-left: 2px solid black; display:none; height:500px"></div>
            </div>

            <div class="row" style="border-top: 2px solid black">
                <div id="chartdivbsfline" style="padding-top:50px; display:none;">
                    <div class="col-lg-12 col-xl-12 col-sm-12" style="height:50px;">
                        <p style="font-size:25px; font-weight:500; color:#6794DC;">Business Support Facility Governmnet & Private</p>
                    </div>
                </div>
            </div>
           
            <div class="row">
                <div class="col-lg-6 col-xl-6 col-sm-6" style="border-right: 2px solid black">
                    <div id="chartdivbsf1" style="display:none; height:500px"></div>
                </div>

                <div class="col-lg-6 col-xl-6 col-sm-6" style="">
                    <div id="chartdivbsf2" style="display:none; height:500px"></div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6 col-xl-6 col-sm-6" style="border-right: 2px solid black">
                    <div id="chartdivtvt1" style="display:none; height:500px"></div>
                </div>

                <div class="col-lg-6 col-xl-6 col-sm-6" style="">
                    <div id="chartdivtvt2" style="display:none; height:500px"></div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6 col-xl-6 col-sm-6">
                    <table id="htstable" class="table table-hover table-bordered table-striped" style="width:100% ; display:none">
                        <thead style="background-color:#67b7dc; color:white">
                            <tr>
                                <th colspan="4" style="text-align: center; vertical-align: middle">High Tunnel System District Wise</th>
                            </tr>
                            <tr>
                                <th  style="text-align: center; vertical-align: middle">
                                    District
                                </th>
                                <th  style="text-align: center; vertical-align: middle">
                                    Male
                                </th>
                                <th  style="text-align: center; vertical-align: middle">
                                    Female
                                </th>
                                <th  style="text-align: center; vertical-align: middle">
                                    Total
                                </th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var obj in htsList)
                            {
                                @*maleHTST += obj.Male;
                                femaleHTST += obj.Female;
                                totalHTST += obj.Total;*@
                                <tr>
                                    <td width="50%">
                                        @obj.District
                                    </td>
                                    <td width="50%">
                                        @obj.Male
                                    </td>
                                    <td width="50%">
                                        @obj.Female
                                    </td>
                                    <td width="50%">
                                        @obj.Total
                                    </td>
                                </tr>
                            }
                            <tr style="background-color:#67b7dc">
                                <td style="font-weight:bolder; color:white;">
                                    Total
                                </td>
                                <td style="font-weight:bolder; color:white;">
                                    @maleHTST
                                </td>
                                <td style="font-weight:bolder; color:white;">
                                    @femaleHTST
                                </td>
                                <td style="font-weight:bolder; color:white;">
                                    @totalHTST
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="col-lg-6 col-xl-6 col-sm-6 " id="chartdivhts" style="border-left: 2px solid black; display:none; height: 500px"></div>
            </div>
            
            <div class="row">
                <div class="col-lg-6 col-xl-6 col-sm-6">
                    <table id="edptable" class="table table-hover table-bordered table-striped" style="width:100% ; display:none">
                        <thead style="background-color:#67b7dc; color:white">
                            <tr>
                                <th colspan="4" style="text-align: center;">EDP Table</th>
                            </tr>
                            <tr>
                                <th style="text-align: center;">
                                    District
                                </th>
                                <th style="text-align: center;">
                                    Male
                                </th>
                                <th style="text-align: center;">
                                    Female
                                </th>
                                <th style="text-align: center;">
                                    Total
                                </th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var obj in edpList)
                            {
                                @*maleHTST += obj.Male;
                            femaleHTST += obj.Female;
                            totalHTST += obj.Total;*@
                                <tr>
                                    <td width="50%">
                                        @obj.District
                                    </td>
                                    <td width="25%">
                                        @obj.Male
                                    </td>
                                    <td width="25%">
                                        @obj.Female
                                    </td>
                                    <td width="25%">
                                        @obj.Total
                                    </td>
                                </tr>
                            }
                            <tr style="background-color:#67b7dc">
                                <td style="font-weight:bolder; color:white;">
                                    Total
                                </td>
                                <td style="font-weight:bolder; color:white;">
                                    0
                                </td>
                                <td style="font-weight:bolder; color:white;">
                                    0
                                </td>
                                <td style="font-weight:bolder; color:white;">
                                    0
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div class="col-lg-6 col-xl-6 col-sm-6 " id="chartdivedp" style="border-left: 2px solid black; display:none; height: 500px"></div>
            </div>
            
             @* START HTS FIRST ROW SECTION *@

            <div id="htstitle" style="padding-top:50px; display:none;">
                <div class="row" style="border-top: 2px solid black">
                    <div class="col-lg-12 col-xl-12 col-sm-12" style="height:50px;">
                        <p style="font-size:25px; font-weight:500; color:#6794DC;">High Tunnel System Area Wise</p>
                    </div>
                </div>
            </div>

            <div id="htsFulltable" style="display:none;">
                <table class="table table-bordered table-striped" style="width:100%; ">
                    <thead style="background-color:#67b7dc; color:white">
                        <tr>
                            @*<th style="text-align: center; vertical-align: middle; width:20%">District</th>*@
                            <th style="text-align: center; vertical-align: middle; width:100%" colspan="6">No Of Tunnels Area Wise</th>
                            @*<th style="text-align: center; vertical-align: middle; width:25%">No Of HTS District Wise</th>*@
                        </tr>
                        <tr>
                            @*<th></th>*@
                            <th style="text-align: center; vertical-align: middle; width:25%">District</th>
                            <th style="text-align: center; vertical-align: middle; width: 30%" colspan="2">
                                22000 Sqr Feet
                            </th>
                            <th style="text-align: center; vertical-align: middle; width: 30%" colspan="2">
                                11000 Sqr Feet
                            </th>
                            <th style="text-align: center; vertical-align: middle; width: 30%">No Of HTS District Wise</th>
                            @*<th></th>*@
                        </tr>
                        <tr>
                            <th></th>
                            <th style="text-align: center; vertical-align: middle;">Male</th>
                            <th style="text-align: center; vertical-align: middle;">Female</th>
                            <th style="text-align: center; vertical-align: middle;">Male</th>
                            <th style="text-align: center; vertical-align: middle;">Female</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            foreach (var obj in htsTable)
                            {
                                maleBigHts += obj.MaleBig;
                                femaleBigHts += obj.FemaleBig;
                                maleSmallHts += obj.MaleSmall;
                                femaleSmallHts += obj.FemaleSmall;
                                totalFHts += obj.Total;

                                                        <tr>
                                                            <td>
                                                                @obj.District
                                                            </td>
                                                            <td>
                                                                @obj.MaleBig
                                                            </td>
                                                            <td>
                                                                @obj.FemaleBig
                                                            </td>
                                                            <td>
                                                                @obj.MaleSmall
                                                            </td>
                                                            <td>
                                                                @obj.FemaleSmall
                                                            </td>
                                                            <td>
                                                                @obj.Total
                                                            </td>
                                                        </tr>
                            }
                                                    <tr style="background-color:#67b7dc">
                                                        <td style="font-weight:bolder; color:white;">Total</td>
                                                        <td style="font-weight:bolder; color:white;">
                                                            @maleBigHts
                                                        </td>
                                                        <td style="font-weight:bolder; color:white;">
                                                            @femaleBigHts
                                                        </td>
                                                        <td style="font-weight:bolder; color:white;">
                                                            @maleSmallHts
                                                        </td>
                                                        <td style="font-weight:bolder; color:white;">
                                                            @femaleSmallHts
                                                        </td>
                                                        <td style="font-weight:bolder; color:white;">
                                                            @totalFHts
                                                        </td>
                                                    </tr>
                        }

                    </tbody>
                </table>
            </div>

            @* END HTS FIRST ROW SECTION *@

            @* START HTS BIFURCATION SECTION *@

            <div id="lipbifurtitle" style="padding-top:50px; display:none;">
                <div class="row">
                    <div class="col-lg-12 col-xl-12 col-sm-12" style="height:50px;">
                        <p style="font-size:25px; font-weight:500; color:#6794DC;">LIP Package Wise Bifurcation</p>
                    </div>
                </div>
            </div>

            <div style="display:flex">
                <div id="lipbifurtable" style="display:none;">
                    <table  class="table table-bordered table-striped" style="width:100%; ">
                        <thead style="background-color:#67b7dc; color:white">
                            <tr>
                                @*<th></th>*@
                                    <th style="text-align: center; vertical-align: middle; width:20%;">District</th>
                                    <th style="text-align: center; vertical-align: middle;" colspan="3">
                                        Host Packages
                                    </th>

                                    <th style="text-align: center; vertical-align: middle; width: 20%;">Total</th>
                                @*<th></th>*@
                            </tr>
                                <tr>
                                <th></th>
                                <th style="text-align: center; vertical-align: middle;">Goat And Sheep Package</th>
                                <th style="text-align: center; vertical-align: middle;">Sewing And Peko Machine</th>
                                <th style="text-align: center; vertical-align: middle;">Tuck Shop</th>               
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                foreach (var obj in lipBifurHostData)
                                {
                                    GoatAndSheepPackage += obj.GoatAndSheepPackage;
                                    SewingAndPekoMachine += obj.SewingAndPekoMachine;
                                    TuckShop += obj.TuckShop;                               
                                    TotalHostCount += obj.TotalCount;

                                    <tr>
                                        <td style="text-align: center; vertical-align: middle;">
                                            @obj.District
                                        </td>
                                        <td style="text-align: center; vertical-align: middle;">
                                            @obj.GoatAndSheepPackage
                                        </td>
                                        <td style="text-align: center; vertical-align: middle;">
                                            @obj.SewingAndPekoMachine
                                        </td>
                                        <td style="text-align: center; vertical-align: middle;">
                                            @obj.TuckShop
                                        </td>
                                        <td style="text-align: center; vertical-align: middle;">
                                            @obj.TotalCount
                                        </td>
                                    </tr>
                                }
                                <tr style="background-color:#67b7dc">
                                    <td style="text-align: center; vertical-align: middle; font-weight:bolder; color:white;">Total</td>
                                    <td style="text-align: center; vertical-align: middle; font-weight:bolder; color:white;">
                                        @GoatAndSheepPackage
                                    </td>
                                    <td style="text-align: center; vertical-align: middle; font-weight:bolder; color:white;">
                                        @SewingAndPekoMachine
                                    </td>
                                    <td style="text-align: center; vertical-align: middle; font-weight:bolder; color:white;">
                                        @TuckShop
                                    </td>
                                    <td style="text-align: center; vertical-align: middle; font-weight:bolder; color:white;">
                                        @TotalHostCount
                                    </td>

                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
                <div id="lipbifurtable2" style="border-left:2px solid black;  display:none;">
                    <table  class="table table-bordered table-striped" style="width:100%;">
                        <thead style="background-color:#67b7dc; color:white">
                        <tr>
                            @*<th></th>*@
                            <th style="text-align: center; vertical-align: middle; width:20%">District</th>

                            <th style="text-align: center; vertical-align: middle;" colspan="3">
                                Refugee Packages
                            </th>
                            <th style="text-align: center; vertical-align: middle; width: 20%">Total</th>
                            @*<th></th>*@
                        </tr>
                        <tr>
                            <th></th>
                            <th style="text-align: center; vertical-align: middle;">Sun Based Fruit Drying</th>
                            <th style="text-align: center; vertical-align: middle;">Backyard Kitchen Gardening</th>
                            <th style="text-align: center; vertical-align: middle;">IDO Poultry</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            foreach (var obj in lipBifurRefData)
                            {                               
                                SunBasedFruitDrying += obj.SunBasedFruitDrying;
                                BackyardKitchenGardening += obj.BackyardKitchenGardening;
                                IDOPoultry += obj.IDOPoultry;
                                TotalRefCount += obj.TotalCount;

                                <tr>
                                    <td style="text-align: center; vertical-align: middle;">
                                        @obj.District
                                    </td>
                                   
                                    <td style="text-align: center; vertical-align: middle;">
                                        @obj.SunBasedFruitDrying
                                    </td>
                                    <td style="text-align: center; vertical-align: middle;">
                                        @obj.BackyardKitchenGardening
                                    </td>
                                    <td style="text-align: center; vertical-align: middle;">
                                        @obj.IDOPoultry
                                    </td>
                                    <td style="text-align: center; vertical-align: middle;">
                                        @obj.TotalCount
                                    </td>
                                </tr>
                            }
                            <tr>
                                    <td style="text-align: center; vertical-align: middle;">
                                        Sherani
                                    </td>
                                    <td style="text-align: center; vertical-align: middle;">0</td>
                                    <td style="text-align: center; vertical-align: middle;">0</td>
                                    <td style="text-align: center; vertical-align: middle;">0</td>
                                    <td style="text-align: center; vertical-align: middle;">0</td>
                            </tr>
                            <tr style="background-color:#67b7dc">
                                <td style="text-align: center; vertical-align: middle; font-weight:bolder; color:white;">Total</td>
                                
                                <td style="text-align: center; vertical-align: middle; font-weight:bolder; color:white;">
                                    @SunBasedFruitDrying
                                </td>
                                <td style="text-align: center; vertical-align: middle; font-weight:bolder; color:white;">
                                    @BackyardKitchenGardening
                                </td>
                                <td style="text-align: center; vertical-align: middle; font-weight:bolder; color:white;">
                                    @IDOPoultry
                                </td>
                                <td style="text-align: center; vertical-align: middle; font-weight:bolder; color:white;">
                                    @TotalRefCount
                                </td>

                            </tr>
                        }

                    </tbody>
                </table>
                </div>

            </div>

            @* END HTS BIFURCATION SECTION *@


            <div class="row" id="cbtChartDiv2" style="display:none">
                <div id="chartdivcbt2" style="height:500px"></div>               
            </div>


            <div id="cicigtitle" style="padding-top:50px; display:none;">
                <div class="row" style="border-top: 2px solid black">
                    <div class="col-lg-12 col-xl-12 col-sm-12" style="height:50px;">
                        <p style="font-size:25px; font-weight:500; color:#6794DC;">Training Events</p>
                    </div>
                </div>
            </div>
            @* class="table-container" id="IntertableI" style="display: block; width: 100%; overflow-x: auto;" *@
            <div id="cbttable" style="display:none">
                <table class="table table-bordered table-striped border-collapse: collapse;" style="">
                    <thead style="background-color:#67b7dc; color:white">
                        <tr>
                            <th colspan="4" style="text-align: center;">Training Events</th>
                        </tr>
                        <tr>
                            <th style="text-align: center">
                                District
                            </th>
                            <th style="text-align: center">
                                Male
                            </th>
                            <th style="text-align: center">
                                Female
                            </th>
                            <th style="text-align: center">
                                Total
                            </th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var obj in trainingEv)
                        {
                            @* maleCBTT += obj.Male;
                            femaleCBTT += obj.Female; *@
                            <tr>
                                <td style="text-align: center">
                                    @obj.District
                                </td>
                                <td style="text-align: center">
                                    @obj.Male
                                </td>
                                <td style="text-align: center">
                                    @obj.Female
                                </td>
                                <td style="text-align: center">
                                    @{var mfT = obj.Male + obj.Female;}
                                    @mfT
                                </td>
                            </tr>
                        }
                        <tr style="background-color:#67b7dc">
                            <td style="font-weight:bolder; color:white; text-align: center;">
                                Total
                            </td>
                            <td style="font-weight:bolder; color:white; text-align: center;">
                                @maleCBTT
                            </td>
                            <td style="font-weight:bolder; color:white; text-align: center;">
                                @femaleCBTT
                            </td> 
                            <td style="font-weight:bolder; color:white; text-align: center;">                                
                                @grandT
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

        </div>

        <div class="ib2" id="mainDiv3" style="display:none; border-bottom: 2px solid black; border-right: 2px solid black;">
            <p style="font-size:25px; font-weight:500; color:#6794DC; margin-top:20px;">Other Interventions</p>
            <div id="solidguage">
            </div>
        </div>
        <div class="ib2" id="mainDiv2" style="display:none; border:2px solid black">
            <div style="border-bottom: 2px solid black;" id="guagechartdiv"></div>
        </div>

    </div>

</div>




<script>

    // Function to dynamically increase the page size when a new div is added
    function onDivAdded(mutationsList) {
        console.log("11111")
        mutationsList.forEach(mutation => {
            if (mutation.type === 'childList') {
                console.log("22222")
                // Check if new nodes have been added to the content container
                const newNodes = mutation.addedNodes;
                if (newNodes.length > 0) {
                    // Update the page size to fit the new content
                    adjustPageSize();
                }
            }
        });
    }

    // Function to adjust the page size to fit the new content
    function adjustPageSize() {
        console.log("333333")
        const contentContainer = document.getElementById("mainDiv");
        const contentHeight = contentContainer.scrollHeight;
        document.body.style.height = contentHeight + "px";
    }

    console.log("4444")
    // Watch for changes in the content container using a Mutation Observer
    const contentContainer = document.getElementById("mainDiv");
    const observerConfig = { childList: true };
    const observer = new MutationObserver(onDivAdded);
    observer.observe(contentContainer, observerConfig);

</script>
